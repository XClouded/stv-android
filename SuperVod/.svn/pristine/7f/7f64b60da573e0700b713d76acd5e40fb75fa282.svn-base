package com.stv.supervod.activity;

import java.util.ArrayList;
import java.util.HashMap;

import com.stv.supervod.adapter.EditListItemAdapter;
import com.stv.supervod.doc.DB;
import com.stv.supervod.service.HttpDownloadImpl.KeyEnum;
import com.stv.supervod.service.HttpDownloadImpl.TypeEnum;
import com.stv.supervod.utils.AlertUtils;
import com.stv.supervod.utils.ErrorCode;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.RatingBar;
import android.widget.SimpleAdapter;
import android.widget.TextView;


/**
 * @author      Administrator
 * @description 收藏，上一级菜单：更多
 * @authority   激活用户
 * @function    1、向服务器请求收藏的影片（20），并展示
 *              2、用户点击编辑按钮，允许用户删除影片，并给予确认提示
 *              3、用户点击某一部影片，向服务器请求该影片数据，进入影片详细页：Detail
 *              4、收藏和书签共用一套页面
 */
/**
 * Description: 
 * Copyright (c) 永新视博
 * All Rights Reserved.
 * @version 1.0  2011-12-6 上午10:39:41 zhaojunfeng created
 */
public class Interest extends BaseActivity{
	private final String TAG = "Interest";
	
	private ListView mListView;
	private ArrayList<HashMap<String, Object>> mListItem = new ArrayList<HashMap<String, Object>>();
	private Button mBtnBack;
	private Button mBtnEdit;	
	
	private boolean mIsEdit = false;
	private EditListItemAdapter mItemListadapter = null;
	private int mItemSelected = -1;
	private DB mDbInstance = null;
	
	@Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.interest);
        
        mDbInstance = DB.getDBInstance(this);
        
        initGui();

        getDataFromDb();
        
		mItemListadapter = new EditListItemAdapter(this, mListItem);
		mListView.setAdapter(mItemListadapter);
		
        bindAction();
    }
	
	private void initGui()
	{
        mListView = (ListView) findViewById(R.id.interest_list);
        mBtnBack = (Button) findViewById(R.id.interest_btn_back);
        mBtnEdit = (Button) findViewById(R.id.interest_btn_edit);
	}
	
	private void bindAction()
	{
        // listview click
        mListView.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int position,
					long arg3) {
				// TODO Auto-generated method stub
				mItemSelected = position;
				if( mIsEdit ){
					//doDeleteFunc(position);
					showDialog( false );
				} else {
					doplay();			
				}
			}
		});
        
        // btn back
        mBtnBack.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Framework.switchActivityBack();
			}
		});
        
        // btn edit
        mBtnEdit.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				if( mListItem.size() == 0 && !mIsEdit ){ // 非编辑状态且没有节目时，不能编辑
					return;
				}
				
				mIsEdit = !mIsEdit;
				if( mIsEdit ){
					mBtnEdit.setText(getString(R.string.further_btn_editok));
					mItemListadapter.enableEdit();
				} else {
					mBtnEdit.setText(getString(R.string.further_btn_edit));
					mItemListadapter.disableEdit();
				}
			}
		});
	}
	
	private void doplay(){
		AlertUtils.displayToast(this, "Play ");
	}
	
	private void showDialog( boolean isClear )
	{
		AlertDialog.Builder bd = new AlertDialog.Builder(Interest.this);
		bd.setTitle(R.string.further_dlg_title);
		
		if( isClear ){
			bd.setMessage(R.string.further_dlg_clear_content);
			bd.setPositiveButton( getString(R.string.framework_dlg_btn_ok),
					new OnClickListener() {
				
				@Override
				public void onClick(DialogInterface arg0, int arg1) {
					// TODO Auto-generated method stub
					doDeleteFunc();
				}
			});
		} else {
			bd.setMessage(R.string.further_dlg_delete_content);
			bd.setPositiveButton( getString(R.string.framework_dlg_btn_ok)
					, new OnClickListener() {
				
				@Override
				public void onClick(DialogInterface arg0, int arg1) {
					// TODO Auto-generated method stub
					doDeleteFunc();	
				}
			});
		}
		
		bd.setNegativeButton(getString(R.string.framework_dlg_btn_cancel)
				, new OnClickListener() {
			
			@Override
			public void onClick(DialogInterface dialog, int which) {
				// TODO Auto-generated method stub
				
			}
		});
		
		bd.setCancelable(false);
		bd.show();
	}
	
	private void doDeleteFunc()
	{
		if( mItemSelected == -1 ){
			mListItem.clear();
		} else {
			mListItem.remove(mItemSelected);
			int index = Integer.parseInt(mListItem.get(mItemSelected).get
					(KeyEnum.id.toString()).toString());
			mDbInstance.delMyfav(index);
		}
		mItemListadapter.notifyDataSetChanged();
	}
	
	private void getDataFromDb()
	{
//		//just for test
//		for(int i=0;i<22;i++)  
//        {  
//			HashMap<String, Object> map = new HashMap<String, Object>();
//			int type = i % 3;
//			if( type == 0 ){
//				map.put( KeyEnum.title.toString(), String.format("电影-%d", i));
//				map.put(KeyEnum.category.toString(), "惊悚");
//				map.put(KeyEnum.type.toString(), TypeEnum.MOVIE.toString());  				
//			} else if( type == 1 ){
//				map.put( KeyEnum.title.toString(), String.format("歌曲-%d", i));
//				map.put(KeyEnum.category.toString(), "流行");
//				map.put(KeyEnum.type.toString(), TypeEnum.KTV.toString());
//				map.put(KeyEnum.actor.toString(), "刘德华");				
//			} else {
//				map.put( KeyEnum.title.toString(), String.format("回看-%d你你爱爱上年底阿斯顿", i));
//				map.put(KeyEnum.category.toString(), "tstv");
//				map.put(KeyEnum.type.toString(), TypeEnum.TSTV.toString());				
//			}
//			mListItem.add(map);  
//        }
		
		if( mDbInstance == null ){
			return;
		}
		
		Cursor cursor = mDbInstance.getAllMyfavCursor();
		if( cursor.getCount() == 0 || !cursor.moveToFirst() ){
			return;
		}

		do {
			HashMap<String, Object> map = new HashMap<String, Object>();
			map.put(KeyEnum.id.toString(), cursor.getString(0));
			map.put(KeyEnum.title.toString(), cursor.getString(1));
			map.put(KeyEnum.type.toString(), cursor.getString(2));
			map.put(KeyEnum.categories.toString(), cursor.getString(3));
			map.put(KeyEnum.poster.toString(), cursor.getString(4));
			map.put(KeyEnum.assetId.toString(), cursor.getString(5));
			mListItem.add(map);  			
		} while (cursor.moveToNext());
	}
}
