package com.stv.supervod.activity;

import java.util.ArrayList;
import java.util.HashMap;

import com.stv.supervod.adapter.FurtherListViewAdapter;
import com.stv.supervod.widget_extended.ExListViewMyepg;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.DialogInterface.OnClickListener;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.RatingBar;
import android.widget.SimpleAdapter;
import android.widget.TextView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Toast;

/**
 * @author      Administrator
 * @description 书签，上一级菜单：更多
 * @authority   激活用户
 * @function    1、向服务器请求该用户书签数据并显示，加载本地或服务器图片
 *              2、用户点击编辑按钮，允许用户删除影片，并给予确认提示
 *              3、播放影片
 */
public class Bookmark extends BaseActivity{
	private final static String TAG = "Bookmark";
		
	private ListView mListView;
	private ArrayList<HashMap<String, Object>> mListItem = new ArrayList<HashMap<String, Object>>();
	private TextView mTextViewInfo;
	private Button mBtnBack;
	private Button mBtnEdit;
	private Button mBtnClear;
	
	// load more widget
	private TextView mTvMore;
	private LinearLayout mLlMore;
	private View mVwMore = null;
	
	private final int mPageSize = 10;
	private int mPageCount = 0;
	private int mItemCount = 0;
	private int mtempItemCount = 0;
	private boolean mIsToEnd = false;
	
	private final int MsgPageLoadMore = 1;
	private final int MsgPageLoading = 2;
	
	private boolean mIsEdit = false;
	private FurtherListViewAdapter  mItemListadapter = null;
	private int mItemSelected = -1;
	
	@Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.bookmark);
                
        initGui();
        
        // get total count
        if( getItemsSizeFromServer() == 0 ){
        	return;
        }
        // get item per page
        getItemsFromServer();
        
		// must before setAdapter
        addMorePage();
        mItemListadapter = new FurtherListViewAdapter( this, mListItem, mIsEdit );
		mListView.setAdapter(mItemListadapter);
		
		infoTextUpdate();
		
		bindAction();
    }
	
	private void initGui()
	{
        mListView = (ListView) findViewById(R.id.bookmark_list);
        mTextViewInfo = (TextView) findViewById(R.id.bookmark_tv_info);
        mBtnBack = (Button) findViewById(R.id.bookmark_btn_back);
        mBtnClear = (Button) findViewById(R.id.bookmark_btn_clear);
        mBtnEdit = (Button) findViewById(R.id.bookmark_btn_edit);
	}
	
	private void bindAction()
	{
        mListView.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int position,
					long arg3) {
				// TODO Auto-generated method stub
				mItemSelected = position;
				if( mIsEdit ){
					//doDeleteFunc(position);
					showDialog( false );
				} else {
					Toast.makeText(Bookmark.this, String.format("Will Play [%s]!!", 
							mListItem.get(position).get("ItemName").toString()),
							Toast.LENGTH_SHORT).show();
				}
			}
		});
        
        //
        mBtnBack.setOnClickListener(new Button.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Framework.switchActivityBack();
			}
		});
        
        // btn edit
        mBtnEdit.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				if( mListItem.size() == 0 ){
					return;
				}
				
				mIsEdit = !mIsEdit;
				if( mIsEdit ){
					mBtnEdit.setText(getString(R.string.further_btn_editok));
				} else {
					mBtnEdit.setText(getString(R.string.further_btn_edit));
				}
				mItemListadapter.updateAdapter(null, mIsEdit);
				infoTextUpdate();
				moreViewCheckVisible();
			}
		});
        
        // btn clear
        mBtnClear.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				if( mListItem.size() == 0 ){
					return;
				}
				mItemSelected = -1;
				showDialog(true);
			}
		});
	}
	
	private void moreViewCheckVisible()
	{
		if( mVwMore == null ){
			return;
		}
		if( mIsEdit ){
			mListView.removeFooterView(mVwMore);
		} else {	
			if( !mIsToEnd ){
				mListView.addFooterView(mVwMore);
			}
		}
	}
	
	private void showDialog( boolean isClear )
	{
		AlertDialog.Builder bd = new AlertDialog.Builder(Bookmark.this);
		bd.setTitle(R.string.further_dlg_title);
		
		if( isClear ){
			bd.setMessage(R.string.further_dlg_clear_content);
			bd.setPositiveButton( getString(R.string.framework_dlg_btn_ok) , 
					new OnClickListener() {
				
				@Override
				public void onClick(DialogInterface arg0, int arg1) {
					// TODO Auto-generated method stub
					doDeleteFunc();
				}
			});
		} else {
			bd.setMessage(R.string.further_dlg_delete_content);
			bd.setPositiveButton( getString(R.string.framework_dlg_btn_ok) , 
					new OnClickListener() {
				
				@Override
				public void onClick(DialogInterface arg0, int arg1) {
					// TODO Auto-generated method stub
					doDeleteFunc();	
				}
			});
		}
		
		bd.setNegativeButton(getString(R.string.framework_dlg_btn_cancel), 
				new OnClickListener() {
			
			@Override
			public void onClick(DialogInterface dialog, int which) {
				// TODO Auto-generated method stub
				
			}
		});
		
		bd.setCancelable(false);
		bd.show();
	}
	
	private void doDeleteFunc()
	{
		if( mItemSelected == -1 ){
			mListItem.clear();
			mItemCount = 0;
			mListView.removeFooterView(mVwMore);
			mtempItemCount = 0;
		} else {
			mListItem.remove(mItemSelected);
			mtempItemCount--;
		}
		mItemListadapter.updateAdapter(mListItem, mIsEdit);
		infoTextUpdate();
	}
	
	/**
	 * Description: update infoText show the number of records;
	 * @Version1.0 2011-12-6 上午10:39:48 zhaojunfeng created
	 */
	private void infoTextUpdate()
	{
		mTextViewInfo.setText(String.format(getString(R.string.further_txt_bookmarkinfo), 
				mtempItemCount));	
		if( mIsEdit ){
			mTextViewInfo.setVisibility(View.GONE);
		} else {
			mTextViewInfo.setVisibility(View.VISIBLE);
		}	
	}
	
	private void addMorePage()
	{
		if( mIsToEnd ){
			return;
		}
		
		mVwMore = LayoutInflater.from(this).inflate(R.layout.bookmark_item_loadmore, null);
		mTvMore = (TextView) mVwMore.findViewById(R.id.more_id);
		mLlMore = (LinearLayout) mVwMore.findViewById(R.id.load_id);
		
		mTvMore.setOnClickListener(new Button.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				mTvMore.setVisibility(View.GONE);
				mLlMore.setVisibility(View.VISIBLE);
				
				if( mIsToEnd ){
					return;
				}
				
				new Thread( new Runnable() {
					
					@Override
					public void run() {
						// TODO Auto-generated method stub
						try {
							Thread.sleep(3000);
						} catch (InterruptedException  e) {
							// TODO: handle exception
							e.printStackTrace();
						}
						getItemsFromServer();
						
						Message msg = handle.obtainMessage(MsgPageLoadMore);
						handle.sendMessage(msg);
					}
				} ).start();
				
			}
		});
		
		mListView.addFooterView(mVwMore);
	}
	
	private Handler handle = new Handler(){
		
		@Override
		public void handleMessage(Message msg){
			switch (msg.what) {
			case MsgPageLoadMore:
				mItemListadapter.updateAdapter(mListItem, mIsEdit);
				mTvMore.setVisibility(View.VISIBLE);
				mLlMore.setVisibility(View.GONE);
				if( mIsToEnd ){
					mListView.removeFooterView(mVwMore);
				}
				break;
			case MsgPageLoading:
				break;
			default:
				break;
			}
		}
	};
	
	private int getItemsSizeFromServer()
	{
		// to get total count form server
		int totalItems = 21;
		
		// ... 
		mItemCount = totalItems;
		mtempItemCount = totalItems;
		return mItemCount;
	}
	
	private void getItemsFromServer()
	{
		// get data from server
		mPageCount++;
		if( mPageCount * mPageSize >= mItemCount ){
			mIsToEnd = true;
		}
		
		int start = (mPageCount-1)*mPageSize;
		int end ;
		if( mPageCount*mPageSize >  mItemCount ){
			end = mItemCount;
		} else {
			end = mPageCount*mPageSize;
		}
		
		// get data form server
		for (int i = start; i < end; i++) {
	          HashMap<String, Object> map = new HashMap<String, Object>();  
	          map.put("ItemName", String.format("Name%d", i));
	          map.put("ItemType", "film");
	          map.put("ItemImage", R.drawable.video_cover_default);
	          mListItem.add(map);  			
		}
	}
}
