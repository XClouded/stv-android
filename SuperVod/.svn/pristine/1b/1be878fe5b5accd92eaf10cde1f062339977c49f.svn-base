/**
 * 
 */
package com.stv.supervod.service;

import android.os.Bundle;

import com.stv.supervod.service.HttpDownloadImpl.KeyEnum;
import com.stv.supervod.utils.VideoConstant;
import com.stv.supervod.utils.VodModel;

/**
 * @author Administrator
 * @Description: 定义通信协议，主要有申请服务、发送按键以及退出系统
 */
public class TCP_Protocol {
		
	/**
	 * 
	 * @param model
	 * @param type
	 * @return byte[]
	 */
	public static byte[] packed4play(VodModel model,int type){
		byte[] buffer;
		
		if(type == VideoConstant.APPLY_SERVICE){
			if(model.getIsPassword()==0){//0:表示密码登陆 1：表示电话号码登陆
				buffer=new byte[40];
				System.arraycopy(model.getPassword().getBytes(), 0, buffer, 24, model.getPassword().length()); //密码
			}else{
				buffer=new byte[35];
				System.arraycopy(model.getPassword().getBytes(), 0, buffer, 24, model.getPassword().length());//电话号码
			}
			
			buffer[4]=0x00; //点播请求			
			System.arraycopy(model.getSmartCardId().getBytes(), 0, buffer, 6, model.getSmartCardId().length());
			buffer[22]=0x07;//android系统
			buffer[23]=model.getIsPassword();//0表示密码，1：非密码
		}
		else if(type == VideoConstant.MTV_BATCH_PLAY){
			buffer=new byte[14];
			buffer[4]=0x01;
			buffer[6]=model.getAction();
			buffer[7]=model.getPlayMode();
			buffer[8]=new Integer(model.getPlayCount()).byteValue();
			System.arraycopy(model.getChannelId().getBytes(), 0, buffer, 9, model.getChannelId().length());//频道id
			System.arraycopy(model.getOfferingId().getBytes(), 0, buffer, 10, 4);//offering id			
			
		}
		else if(type == VideoConstant.VIDEO_BATCH_PLAY){
			buffer=new byte[13];
			buffer[4]=0x02;
			buffer[6]=model.getAction();
			System.arraycopy(model.getChannelId().getBytes(), 0, buffer, 7, model.getChannelId().length());//频道id
			System.arraycopy(model.getOfferingId().getBytes(), 0, buffer, 8, 4);//offering id
			buffer[12]=model.getIsBookmark();
		}
		else if(type == VideoConstant.SINGLE_PLAY){
			buffer=new byte[11];
			buffer[4]=0x03;
			System.arraycopy(model.getOfferingId().getBytes(), 0, buffer, 6, 4);//offering id
			buffer[10]=model.getIsBookmark();
		}
		else if(type == VideoConstant.PLAY_CONTROL){
			buffer=new byte[9];
			buffer[4]=0x04;
			buffer[6]=model.getOperation();//播放控制：快进、快退、播放、暂停
			buffer[7]=(byte)(model.getNpt_begin()>>8);
			buffer[8]=(byte)model.getNpt_begin();
//			System.arraycopy(new Integer(model.getNpt_begin()).byteValue(), 0, buffer, 7, 2);//offering id
		}
		else if(type == VideoConstant.HEART_BEAT){
			buffer=new byte[6];
			buffer[4]=0x05;
		}
		else if(type == VideoConstant.STOP_SERVICE){
			buffer=new byte[6];
			buffer[4]=0x06;
		}
		else if(type == VideoConstant.QUERY_STATUS){
			buffer=new byte[6];
			buffer[4]=0x08;			
		}
		else if(type == VideoConstant.NETWORK_CHECK){
			buffer = new byte[6];
			buffer[4]=0x09;
		}
		else{
			return null;
		}
		
		buffer[0]=(byte)0xFE;//字节头，用于保证数据完整性
		buffer[1]=0x02; //协议
		buffer[2]=0x01; //版本
		buffer[3]=0x05; 
		buffer[5]=new Integer((buffer.length-5)).byteValue();//字节长度
		return buffer;
		
	}
	
	public static Bundle UnPacked(byte[] buf){	
		Bundle bundle =new Bundle();
		
		//校验协议类型
		if(buf[1] != 2)
		{
			System.out.println("TCP protocal ERROR:协议类型错误"+buf[1]);
			bundle.putByte("type", (byte)0x10);
			return bundle;	
		}
		//校验版本号
		if(buf[2] != 1)
		{   bundle.putByte("type", (byte)0x11);
			System.out.println("tcp protocal ERROR：版本号错误"+buf[2]);
			return bundle;	
		}
		if((buf[3]==5&&buf[4]==0) || (buf[3]==5&&buf[4]==8)){//申请服务	
			bundle.putByte("type", buf[4]);
			bundle.putByte("operationCode", buf[6]);
			bundle.putByte("scale", buf[7]);
			bundle.putByte("channelId", buf[8]);			
			bundle.putShort("nptBegin", (short)(buf[(buf.length-4)]<<8+buf[buf.length-3]));
			bundle.putShort("nptTotal", (short)(buf[(buf.length-2)]<<8+buf[buf.length-1]));									
		}
		else if((buf[3]==5&&buf[4]==1)||(buf[3]==5&&buf[4]==2)||(buf[3]==5&&buf[4]==3)){//播放
			bundle.putByte("type",buf[4]);
			bundle.putByte("operationCode", buf[6]);
			bundle.putShort("nptBegin", (short)(buf[7]<<8+buf[8]));
			bundle.putShort("nptTotal", (short)(buf[9]<<8+buf[10]));	
		}
		
		else if(buf[3]==5&&buf[4]==4){//点播控制返回
			bundle.putByte("type",buf[4]);
			bundle.putByte("operationCode", buf[6]);
			bundle.putByte("scale", buf[7]);
			bundle.putShort("nptBegin", (short)(buf[8]<<8+buf[9]));
									
		}
		else if((buf[3]==5&&buf[4]==5)||(buf[3]==5&&buf[4]==6)||(buf[3]==5&&buf[4]==7)){//心跳\停止服务、系统消息
			bundle.putByte("type",buf[4]);
			bundle.putByte("operationCode", buf[6]);
			
		}
		else if(buf[3]==5&&buf[4]==9){
			bundle.putByte("type",buf[4]);
			
		}
		else if(buf[3]==5&&buf[4]==8){
			String s="";
			for(int i=13;i<269;i++){
				s+=(char)buf[i];
			}
			bundle.putByte("type",buf[4]);
			bundle.putByte(KeyEnum.operationCode.toString(), buf[6]);
			bundle.putByte(KeyEnum.scale.toString(), buf[7]);
			bundle.putByte(KeyEnum.channelId.toString(), buf[8]);
			bundle.putInt(KeyEnum.offeringId.toString(), (int)(buf[9]<<24+buf[10]<<16+buf[11]<<8+buf[12]));
			bundle.putString(KeyEnum.assetId.toString(), s);
			bundle.putShort(KeyEnum.startTime.toString(), (short)(buf[(buf.length-4)]<<8+buf[buf.length-3]));
			bundle.putShort(KeyEnum.runTime.toString(), (short)(buf[(buf.length-2)]<<8+buf[buf.length-1]));
		}
		else
			bundle.putByte("type", (byte)0x12);
		return bundle;
		
	}

	

}
