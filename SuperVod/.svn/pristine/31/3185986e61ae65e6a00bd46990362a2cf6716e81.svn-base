package com.stv.supervod.service;

import java.io.IOException;

import org.apache.http.client.ClientProtocolException;

import android.app.Activity;
import android.content.SharedPreferences;

import com.stv.supervod.utils.Constant;
import com.stv.supervod.utils.ValidateUtil;

public class RegisterServiceImpl {

	public static enum KeyEnum {
		registerinfo,username, password, mycity, pwtype
	}

	/**
	 * Description: 验证通过后保存用户名密码，以及是否自动登录等信息
	 * 注意：需要指定为数据的共享模式，系统默认只能一个activity使用数据
	 * 
	 * @Version1.0 2011-12-6 上午10:14:10 mustang created
	 * @param act
	 * @param username
	 * @param password
	 * @param auto_login
	 * @param remember_password
	 * @throws IOException
	 * @throws ClientProtocolException
	 */
	public String login(Activity act, String username, String password, String mycity, String pwtype) throws ClientProtocolException, IOException {
		//String loginResult = loginService(username, password); TODO 暂时注释掉
		String loginResult = "";
		if (loginResult == "") {
			SharedPreferences sp = act.getSharedPreferences(KeyEnum.registerinfo.toString(), Activity.MODE_PRIVATE);
			SharedPreferences.Editor se = sp.edit();
			se.putString(KeyEnum.username.toString(), username);
			se.putString(KeyEnum.password.toString(), password);
			se.putString(KeyEnum.mycity.toString(), mycity);
			se.putString(KeyEnum.pwtype.toString(), pwtype);
			se.commit();
		}
		return loginResult;

	}

	/**
	 * Description: 获取用户信息
	 * 
	 * @Version1.0 2011-12-7 下午03:54:49 mustang created
	 * @param act
	 * @return
	 */
	public SharedPreferences getLocalUserinfo(Activity act) {
		SharedPreferences sp = act.getSharedPreferences("registerinfo", Activity.MODE_PRIVATE);
		return sp;
	}

	/**
	 * Description: 登录服务器
	 * 
	 * @Version1.0 2011-12-7 下午03:02:58 mustang created
	 * @param username
	 * @param password
	 * @return
	 * @throws IOException
	 * @throws ClientProtocolException
	 */
	public String loginService(String username, String password) throws ClientProtocolException, IOException {
		StringBuilder loginInfo = new StringBuilder();
		if (!ValidateUtil.isBlank(username) && !ValidateUtil.isBlank(password)) {
			loginInfo.append("{");
			loginInfo.append("\"user\"").append(":").append("\"").append(username).append("\",");
			loginInfo.append("\"psd\"").append(":").append("\"").append(password).append("\"");
			loginInfo.append("}");
			HttpRequestServiceImpl httpRequest = new HttpRequestServiceImpl();
			StringBuilder sb = httpRequest.requestByHttpPost(loginInfo.toString(), Constant.login_url);
		} else {
			loginInfo.append("error");
		}
		return loginInfo.toString();
	}

	/**
	 * Description: 退出服务器
	 * 
	 * @Version1.0 2011-12-7 下午03:02:58 mustang created
	 * @param username
	 * @param password
	 * @return
	 */
	public boolean logoutService(Activity act) {
		/*Map<String, String> map = getLocalUserinfo(act);
		String username = (String) map.get("username");
		String password = (String) map.get("username");
		// 注销的同时标识为下线
		SharedPreferences sp = act.getSharedPreferences("registerinfo", Activity.MODE_PRIVATE);
		if (sp != null) {
			sp.edit().putBoolean("online", false).commit();
		}
		if (!ValidateUtil.isBlank(username) && !ValidateUtil.isBlank(password)) {
			// TODO 据说注销这里暂时是不需要发请求的，服务器自己会把流推完。
		}*/
		return true;
	}

	/**
	 * Description: 添加相关信息，去服务器端验证有效性
	 * 
	 * @Version1.0 2011-12-6 下午02:43:29 mustang created
	 * @param username
	 * @param password
	 * @param email
	 * @param phone
	 * @param id_number
	 * @param smartcard
	 * @param service_password
	 * @throws IOException
	 * @throws ClientProtocolException
	 */
	public boolean saveRegisterInfo(String username, String password, String phone, String id_number, String smartcard, String service_password)
			throws ClientProtocolException, IOException {
		// String json1 = "{"+ "\"query\": \"Pizza\", "+
		// "\"locations\": [ 94043, 90210 ] "+ "}";

		StringBuilder sj = new StringBuilder();
		sj.append("{");
		sj.append("\"username\"").append(":").append("\"").append(username).append("\",");
		sj.append("\"password\"").append(":").append("\"").append(password).append("\",");
		sj.append("\"phone\"").append(":").append("\"").append(phone).append("\",");
		sj.append("\"id_number\"").append(":").append("\"").append(id_number).append("\",");
		sj.append("\"smartcard\"").append(":").append("\"").append(smartcard).append("\"");
		sj.append("}");
		HttpRequestServiceImpl httpRequest = new HttpRequestServiceImpl();
		StringBuilder sb = httpRequest.requestByHttpPost(sj.toString(), "");
		// TODO 对SB返回来的JSON串进行解析，如果正确返回true,否则返回false;
		return true;

	}

}
