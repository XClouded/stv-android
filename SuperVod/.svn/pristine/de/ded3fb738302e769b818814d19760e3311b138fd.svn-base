package com.stv.supervod.service;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.SoftReference;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.os.AsyncTask;
import android.view.View;
import android.widget.ImageView;

import com.stv.supervod.activity.R;
import com.stv.supervod.utils.Constant;
import com.stv.supervod.utils.ValidateUtil;

public class ImageDownloader {

	/**
	 * 写文件的线程是否在执行的标记
	 */
	private boolean writeFileFlag = false;

	private int HARD_CACHE_CAPACITY = 100;

	private ConcurrentHashMap<String, SoftReference<Drawable>> posterCache = new ConcurrentHashMap<String, SoftReference<Drawable>>(
			HARD_CACHE_CAPACITY);

	private List<Map<String, Object>> writeList = new ArrayList<Map<String, Object>>();

	private static ImageDownloader imageDownloader;

	public static ImageDownloader getImageDownloader() {
		if (imageDownloader == null) {
			imageDownloader = new ImageDownloader();
		}
		return imageDownloader;
	}

	private ImageDownloader() {

	}

	public static void cleanPosterCache() {
		if (imageDownloader != null) {
			imageDownloader.posterCache.clear();
			imageDownloader.writeList.clear();
			imageDownloader = null;
		}
	}

	/**
	 * Description: 所有人调用的公共入口
	 * 
	 * @Version1.0 2011-12-29 下午04:22:15 mustang created
	 * @param url
	 * @param imageView
	 */
	public void download(String url, View view) {
		Drawable db = null;
		SoftReference<Drawable> sd = posterCache.get(url);
		if (sd != null) {
			db = sd.get();
		} else {
			db = ImageServiceImpl.getImageDrawableByUrl(url);
			// 进缓存
			if (db != null) {
				SoftReference<Drawable> srf = new SoftReference<Drawable>(db);
				posterCache.put(url, srf);
			}
		}
		if (db != null && view != null) {
			if (view instanceof ImageView) {
				((ImageView) view).setImageDrawable(db);
			} else {
				view.setBackgroundDrawable(db);
			}
		} else {
			forceDownload(url, view);
		}
	}

	/**
	 * Description: 强制下载
	 * 
	 * @Version1.0 2011-12-29 下午04:20:21 mustang created
	 * @param url
	 * @param imageView
	 */
	private void forceDownload(String url, View view) {
		DrawableDownloaderTask task = new DrawableDownloaderTask(view);
		if (view instanceof ImageView) {
			((ImageView) view).setImageResource(R.drawable.video_cover_default);
		} else {
			view.setBackgroundResource(R.drawable.homepage_init);
		}
		task.execute(url);

		// DrawableDownloaderTask task = new DrawableDownloaderTask(view);
		// DownloadedDrawable downloadedDrawable = new DownloadedDrawable(task);
		// if (view instanceof ImageView) {
		// ((ImageView) view).setImageDrawable(downloadedDrawable);
		// ((ImageView) view).setImageResource(R.drawable.video_cover_default);
		// } else {
		// view.setBackgroundDrawable(downloadedDrawable);
		// view.setBackgroundResource(R.drawable.homepage_init);
		// }
		//
		// task.execute(url);

	}

	/**
	 * Description: 下载图片并保存
	 * 
	 * @Version1.0 2011-12-29 下午04:20:51 mustang created
	 * @param url
	 * @return
	 */
	public Drawable asyncDownloadDrawable(String url) {

		HttpDownloadImpl httpDownloader = HttpDownloadImpl.getHttpDownloader();
		Drawable drawable = null;
		if (!ValidateUtil.isBlank(url)) {
			try {
				SoftReference<Drawable> sd = posterCache.get(url);
				if (sd != null) {
					return sd.get();
				}
				drawable = httpDownloader.downloadImageByUrl(url);
				String[] names = url.split("/");
				String filename = "";
				if (names.length > 0) {
					filename = names[names.length - 1];
				}
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("filename", filename);
				map.put("drawable", drawable);
				SoftReference<Drawable> softRef = new SoftReference<Drawable>(drawable);
				posterCache.put(url, softRef);
				writePoster2File(map);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return drawable;

		/*
		 * Drawable drawable = ImageServiceImpl.getImageDrawableByUrl(url); if
		 * (drawable == null) { final String dpath = Constant.download_dir;
		 * String[] names = url.split("/"); String filename = ""; if
		 * (names.length > 0) { filename = names[names.length - 1]; } final
		 * HttpClient client = AndroidHttpClient.newInstance("Android"); final
		 * HttpGet getRequest = new HttpGet(url); try { HttpResponse response =
		 * client.execute(getRequest); final int statusCode =
		 * response.getStatusLine().getStatusCode(); if (statusCode !=
		 * HttpStatus.SC_OK) { return null; } final HttpEntity entity =
		 * response.getEntity(); if (entity != null) {
		 * 
		 * InputStream inputStream = entity.getContent(); try { if
		 * (!ValidateUtil.isBlank(filename)) {
		 * 
		 * FileOutputStream fos = new FileOutputStream(new File(dpath,
		 * filename));
		 * 
		 * drawable = Drawable.createFromStream(new
		 * FlushedInputStream(inputStream), filename);
		 * 
		 * Map<String, Object> map = new HashMap<String, Object>(); // bp =
		 * BitmapFactory.decodeStream(new // FlushedInputStream(inputStream));
		 * map.put("filename", filename); map.put("bp", drawable);
		 * writePoster2File(map); }
		 * 
		 * } finally { if (inputStream != null) { inputStream.close(); }
		 * entity.consumeContent(); } } } catch (IOException e) {
		 * getRequest.abort(); } catch (IllegalStateException e) {
		 * getRequest.abort(); } catch (Exception e) { getRequest.abort(); }
		 * finally { if ((client instanceof AndroidHttpClient)) {
		 * ((AndroidHttpClient) client).close(); } } } return drawable;
		 */
	}

	/**
	 * Description: 把写文件单独提出来
	 * 
	 * @Version1.0 2012-1-4 下午06:10:10 mustang created
	 * @param map
	 */
	public void writePoster2File(Map<String, Object> map) {
		writeList.add(map);
		final String dpath = Constant.download_dir;
		if (writeFileFlag == false) {
			new Thread() {
				@Override
				public void run() {
					while (writeList != null && !writeList.isEmpty()) {
						writeFileFlag = true;
						Map<String, Object> map = writeList.get(writeList.size() - 1);
						String filename = (String) map.get("filename");
						Drawable drawable = (Drawable) map.get("drawable");
						BitmapDrawable bd = null;
						if (drawable != null) {
							bd = (BitmapDrawable) drawable;
						}
						Bitmap bm = null;
						if (bd != null) {
							bm = bd.getBitmap();
						}
						if (bm != null) {
							FileOutputStream fos;
							try {
								fos = new FileOutputStream(new File(dpath, filename));
								bm.compress(Bitmap.CompressFormat.PNG, 100, fos);
								try {
									fos.close();
								} catch (IOException e) {
									e.printStackTrace();
								}
							} catch (FileNotFoundException e) {
								e.printStackTrace();
							}
						}
						writeList.remove(map);
					}
					writeFileFlag = false;
				}
			}.start();
		}
	}

	/**
	 * Description: 通过View获得绑定的task
	 * 
	 * @Version1.0 2011-12-29 下午04:21:25 mustang created
	 * @param view
	 * @return
	 */
	private static DrawableDownloaderTask getDrawableDownloaderTask(View view) {
		if (view != null) {
			Drawable drawable = null;
			if (view instanceof ImageView) {
				drawable = ((ImageView) view).getDrawable();
			} else {
				drawable = view.getBackground();
			}

			if (drawable instanceof DownloadedDrawable) {
				DownloadedDrawable downloadedDrawable = (DownloadedDrawable) drawable;
				return downloadedDrawable.getDrawableDownloaderTask();
			}
		}
		return null;
	}

	/**
	 * Description: 异步的下载任务 Copyright (c) 永新视博 All Rights Reserved.
	 * 
	 * @version 1.0 2011-12-29 下午04:10:30 mustang created
	 */
	class DrawableDownloaderTask extends AsyncTask<String, Void, Drawable> {
		private String url;
		private WeakReference<View> viewReference;

		public DrawableDownloaderTask(View view) {
			viewReference = new WeakReference<View>(view);
		}

		@Override
		protected Drawable doInBackground(String... params) {
			url = params[0];
			return asyncDownloadDrawable(url);
		}

		@Override
		protected void onPostExecute(Drawable result) {
			if (viewReference != null && result != null) {
				View view = viewReference.get();
				//DrawableDownloaderTask dt = getDrawableDownloaderTask(view);
				// if (view != null && this == dt) {
				if (view != null) {
					if (view instanceof ImageView) {
						((ImageView) view).setImageDrawable(result);
					} else {
						view.setBackgroundDrawable(result);

					}
				}
			}
		}

	}

	/**
	 * Description: 设置弱引用关联 Copyright (c) 永新视博 All Rights Reserved.
	 * 
	 * @version 1.0 2011-12-31 上午10:34:58 mustang created
	 */
	static class DownloadedDrawable extends ColorDrawable {
		private final WeakReference<DrawableDownloaderTask> DrawableDownloaderTaskReference;

		public DownloadedDrawable(DrawableDownloaderTask drawableDownloaderTask) {
			DrawableDownloaderTaskReference = new WeakReference<DrawableDownloaderTask>(drawableDownloaderTask);
		}

		public DrawableDownloaderTask getDrawableDownloaderTask() {
			return DrawableDownloaderTaskReference.get();
		}
	}

	static class FlushedInputStream extends FilterInputStream {
		public FlushedInputStream(InputStream inputStream) {
			super(inputStream);
		}

		@Override
		public long skip(long n) throws IOException {
			long totalBytesSkipped = 0L;
			while (totalBytesSkipped < n) {
				long bytesSkipped = in.skip(n - totalBytesSkipped);
				if (bytesSkipped == 0L) {
					int b = read();
					if (b < 0) {
						break; // we reached EOF
					} else {
						bytesSkipped = 1; // we read one byte
					}
				}
				totalBytesSkipped += bytesSkipped;
			}
			return totalBytesSkipped;
		}
	}
}
