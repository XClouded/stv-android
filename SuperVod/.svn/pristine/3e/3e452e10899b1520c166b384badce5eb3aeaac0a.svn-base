package com.stv.supervod.service;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.apache.http.client.ClientProtocolException;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpParams;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.Drawable;
import android.os.Handler;
import android.os.HandlerThread;
import android.widget.BaseAdapter;

import com.stv.supervod.activity.Homepage;
import com.stv.supervod.activity.R;
import com.stv.supervod.utils.Constant;
import com.stv.supervod.utils.ValidateUtil;

public class HttpDownloadImpl {

	/**
	 * 所有需要下载海报的列表都需要在此定义，便于下载完毕后刷新页面
	 */
	public static final int homepage_adapter_today_hit = 100;
	public static final int homepage_adapter_latest_online = 101;
	public static final int homepage_adapter_home_theater = 102;
	public static final int homepage_adapter_tv_playhouse = 103;
	public static final int homepage_adapter_top_singer = 104;

	/**
	 * 已下载大海报容器，大海报不存文件
	 */
	public static Map<String, Object> bigPoster = new HashMap<String, Object>();

	/**
	 * Description: 首页列表数据下载
	 * 
	 * @Version1.0 2011-12-13 下午02:03:59 mustang created
	 * @param act
	 * @return
	 * @throws ClientProtocolException
	 * @throws IOException
	 * @throws JSONException
	 */
	public static Map<String, List<Map<String, Object>>> downloadHomePageList(Activity act) throws ClientProtocolException, IOException,
			JSONException {
		HttpParams params = new BasicHttpParams();
		params.setParameter("r_num", 9);
		params.setParameter("p_num", 20);
		params.setParameter("l_num", 5);

		StringBuilder sb = HttpRequestServiceImpl.requestByHttpGet(params, Constant.HOMEPAGE_DATA_URL);
		Map<String, List<Map<String, Object>>> map = new HashMap<String, List<Map<String, Object>>>();
		List<Map<String, Object>> posters = parsePosterJson(sb, "recommand", "Offerings", act);
		List<Map<String, Object>> today_hit_list = parseHomePageListJson(sb, "list", "今日热播", "Offerings", act);
		map.put("today_hit_list", today_hit_list);
		map.put("posters", posters);
		return map;
	}

	/**
	 * Description: 获取影片、电视剧基本列表信息
	 * 
	 * @Version1.0 2011-12-21 下午02:54:20 mustang created
	 * @param o_type排序类型
	 * @param order
	 *            排序方式 （0升序，1降序）
	 * @param num
	 *            每页条目数
	 * @param page
	 *            当前页码
	 * @param url
	 *            需要包含:category 影片分类参数
	 * @return
	 * @throws IOException
	 * @throws ClientProtocolException
	 * @throws JSONException
	 */
	public static Map<String, Object> downloadCommonList(String o_type, int order, int num, int page, String url, Context act)
			throws ClientProtocolException, IOException, JSONException {
		HttpParams params = new BasicHttpParams();
		params.setParameter("o_type", o_type);
		params.setParameter("order", order);
		params.setParameter("num", num);
		params.setParameter("page", page);
		StringBuilder sb = HttpRequestServiceImpl.requestByHttpGet(params, url);
		return parseCommonListJson(sb, act);
	}

	/**
	 * Description: 获得offering相关信息
	 * 
	 * @Version1.0 2011-12-21 下午03:50:10 mustang created
	 * @param offeringId
	 * @param act
	 * @return
	 * @throws ClientProtocolException
	 * @throws IOException
	 * @throws JSONException
	 */
	public static Map<String, Object> downloadOfferingInfo(String offeringId, Context act) throws ClientProtocolException, IOException, JSONException {
		if (ValidateUtil.isBlank(offeringId)) {
			String offeringurl = Constant.offering_detail_url + offeringId;
			StringBuilder sb = HttpRequestServiceImpl.requestByHttpGet(null, offeringurl);
			return parseOfferingDetailJson(sb, act);
		}
		return null;
	}

	/**
	 * Description: 获取歌手列表
	 * 
	 * @Version1.0 2011-12-21 下午04:09:05 mustang created
	 * @param order
	 *            排序方式 Int （0：a~z，1：z~a）
	 * @param num
	 * @param page
	 * @param act
	 * @return
	 * @throws ClientProtocolException
	 * @throws IOException
	 * @throws JSONException
	 */
	public static Map<String, Object> downloadSingerList(int order, int num, int page, Context act) throws ClientProtocolException, IOException,
			JSONException {
		HttpParams params = new BasicHttpParams();
		if (order != 0 || order != 1) {
			order = 0;
		}
		if (Integer.valueOf(num) == null) {
			num = 20;
		}
		if (Integer.valueOf(page) == null) {
			page = 1;
		}
		params.setParameter("order", order);
		params.setParameter("num", num);
		params.setParameter("page", page);
		StringBuilder sb = HttpRequestServiceImpl.requestByHttpGet(params, Constant.supervod_singer_url);
		return parseSingerListJson(sb, act);
	}

	/**
	 * Description: 获取某歌手的歌曲列表
	 * 
	 * @Version1.0 2011-12-26 上午11:45:58 mustang created
	 * @param num
	 * @param page
	 * @param url
	 * @param act
	 * @return
	 * @throws ClientProtocolException
	 * @throws IOException
	 * @throws JSONException
	 */
	public static Map<String, Object> downloadSongsBySinger(int num, int page, String url, Context act) throws ClientProtocolException, IOException,
			JSONException {
		HttpParams params = new BasicHttpParams();

		if (Integer.valueOf(num) == null) {
			num = 20;
		}
		if (Integer.valueOf(page) == null) {
			page = 1;
		}
		params.setParameter("num", num);
		params.setParameter("page", page);
		StringBuilder sb = HttpRequestServiceImpl.requestByHttpGet(params, url);
		return parseSongsListBySingerJson(sb, act);
	}

	/**
	 * Description: 下载回看频道列表
	 * 
	 * @Version1.0 2011-12-21 下午04:47:56 mustang created
	 * @param num
	 * @param page
	 * @param url
	 * @param act
	 * @return
	 * @throws ClientProtocolException
	 * @throws IOException
	 * @throws JSONException
	 */
	public static Map<String, Object> downloadChannelList(int num, int page, Context act) throws ClientProtocolException, IOException, JSONException {
		HttpParams params = new BasicHttpParams();

		if (Integer.valueOf(num) == null) {
			num = 20;
		}
		if (Integer.valueOf(page) == null) {
			page = 1;
		}
		params.setParameter("num", num);
		params.setParameter("page", page);
		StringBuilder sb = HttpRequestServiceImpl.requestByHttpGet(params, Constant.supervod_channel_url);
		return parseChannelListJson(sb, act);
	}

	/**
	 * Description: 下载回看节目列表
	 * 
	 * @Version1.0 2011-12-21 下午04:57:32 mustang created
	 * @param num
	 * @param page
	 * @param url
	 * @param act
	 * @return
	 * @throws ClientProtocolException
	 * @throws IOException
	 * @throws JSONException
	 */
	public static Map<String, Object> downloadProgramList(int num, int page, String url, Context act) throws ClientProtocolException, IOException,
			JSONException {
		HttpParams params = new BasicHttpParams();

		if (Integer.valueOf(num) == null) {
			num = 20;
		}
		if (Integer.valueOf(page) == null) {
			page = 1;
		}
		params.setParameter("num", num);
		params.setParameter("page", page);
		StringBuilder sb = HttpRequestServiceImpl.requestByHttpGet(params, Constant.supervod_channel_url);
		return parseProgramslListJson(sb, act);
	}

	/**
	 * Description: 下载书签列表
	 * 
	 * @Version1.0 2011-12-21 下午05:02:40 mustang created
	 * @param num
	 * @param page
	 * @param url
	 * @param act
	 * @return
	 * @throws ClientProtocolException
	 * @throws IOException
	 * @throws JSONException
	 */
	public static Map<String, Object> downloadBookmarkList(String url, Context act) throws ClientProtocolException, IOException, JSONException {
		StringBuilder sb = HttpRequestServiceImpl.requestByHttpGet(null, Constant.supervod_channel_url);
		return parseBookmarkListJson(sb, act);
	}

	/**
	 * Description: 下载关键字
	 * 
	 * @Version1.0 2011-12-21 下午05:09:19 mustang created
	 * @param num
	 * @return
	 * @throws ClientProtocolException
	 * @throws IOException
	 * @throws JSONException
	 */
	public static List<String> downloadKeysList(int num) throws ClientProtocolException, IOException, JSONException {
		HttpParams params = new BasicHttpParams();
		if (Integer.valueOf(num) == null) {
			num = 10;
		}
		params.setParameter("num", num);
		StringBuilder sb = HttpRequestServiceImpl.requestByHttpGet(params, Constant.supervod_channel_url);
		return parseKeysListJson(sb);
	}

	/**
	 * Description: 下载搜索节目列表
	 * 
	 * @Version1.0 2011-12-21 下午05:35:02 mustang created
	 * @param type
	 * @param num
	 * @param url
	 * @param act
	 * @return
	 * @throws ClientProtocolException
	 * @throws IOException
	 * @throws JSONException
	 */
	public static Map<String, Object> downloadSearchProgramsList(int type, int num, String url, Context act) throws ClientProtocolException,
			IOException, JSONException {
		HttpParams params = new BasicHttpParams();
		if (Integer.valueOf(type) == null) {
			type = 1;
		}
		if (Integer.valueOf(num) == null) {
			num = 10;
		}
		params.setParameter("num", num);
		params.setParameter("type", type);
		StringBuilder sb = HttpRequestServiceImpl.requestByHttpGet(params, Constant.supervod_channel_url);
		return parseSearchProgramsListJson(sb, act);
	}

	/**
	 * Description: 下载分类列表
	 * 
	 * @Version1.0 2011-12-21 下午06:35:26 mustang created
	 * @param treeIndex
	 * @return
	 * @throws ClientProtocolException
	 * @throws IOException
	 * @throws JSONException
	 */
	public static List<Map<String, Object>> downloadCategorysList(String treeIndex) throws ClientProtocolException, IOException, JSONException {
		if (!ValidateUtil.isBlank(treeIndex)) {
			HttpParams params = new BasicHttpParams();
			params.setParameter("treeIndex", treeIndex);
			StringBuilder sb = HttpRequestServiceImpl.requestByHttpGet(params, Constant.supervod_channel_url);
			return parseCatagorysListJson(sb);
		}
		return null;

	}

	/**
	 * Description: 解析首页海报列表
	 * 
	 * @Version1.0 2011-12-13 下午01:11:12 mustang created
	 * @param sb
	 * @param rootName
	 * @param listName
	 * @param act
	 * @return
	 * @throws JSONException
	 * @throws IOException
	 */
	private static List<Map<String, Object>> parsePosterJson(StringBuilder sb, String rootName, String listName, Activity act) throws JSONException,
			IOException {
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		JSONObject root = new JSONObject(sb.toString());
		JSONArray rootArray = null;
		if (root != null) {
			rootArray = root.getJSONArray(rootName);
		}
		if (rootArray != null && rootArray.length() > 0) {
			JSONObject objroot = (JSONObject) rootArray.get(0);
			JSONArray listArray = objroot.getJSONArray(listName);
			for (int i = 0; i < listArray.length(); i++) {
				Map<String, Object> map = new HashMap<String, Object>();
				JSONObject obj = (JSONObject) listArray.opt(i);
				// ID
				String id = obj.getString("id");
				map.put("id", id);
				// 标题
				map.put("title", obj.getString("Title"));
				// 海报大图片,解析海报
				String url = "";
				if (rootName.equals("recommand")) {
					url = obj.getString("Poster");
				}
				// 添加到下载队列
				if (!ValidateUtil.isBlank(url)&&!ValidateUtil.isBlank(id)) {
					Map<String, String> postetMap = new HashMap<String, String>();
					postetMap.put("id", id);
					postetMap.put("imgurl", url);
					//addBigPosterList(postetMap);
					map.put("imgurl", url);
				}
				// 类别
				map.put("category", obj.getString("Category"));
				// 解析评分
				String ratingBar = obj.getString("Rating");
				if (!ValidateUtil.isBlank(ratingBar)) {
					float vr = Float.parseFloat(ratingBar);
					if (vr > -1) {
						map.put("ratingBar", vr);
					}
					String[] rs = ratingBar.split(".");
					if (rs != null && rs.length > 1) {
						map.put("ratingScore1", rs[0] + ".");
						map.put("ratingScore2", rs[1]);
					}
				}
				list.add(map);
			}
		}
		return list;
	}

	/**
	 * Description: 解析首页数据列表
	 * 
	 * @Version1.0 2011-12-20 上午11:24:11 mustang created
	 * @param sb
	 *            sb 从服务器下载的JSON串
	 * @param rootName
	 *            一级根节点
	 * @param listName
	 *            二级节点名字
	 * @param listRoot
	 *            二级节点名称
	 * @param act
	 * @return
	 * @throws JSONException
	 */
	private static List<Map<String, Object>> parseHomePageListJson(StringBuilder sb, String rootName, String listName, String listRoot, Activity act)
			throws JSONException {
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		// 通过根名字获得整个JSON对象
		JSONArray typeArray = null;
		JSONObject root = new JSONObject(sb.toString());
		if (root != null) {
			typeArray = root.getJSONArray(rootName);
		}
		if (typeArray != null && typeArray.length() > 0) {
			for (int i = 0; i < typeArray.length(); i++) {
				JSONObject jsonObject = (JSONObject) typeArray.get(i);
				String title = "";
				if (jsonObject != null) {
					title = (String) jsonObject.get("Name");
				}

				if (title != "" && title.equals(listName)) {
					JSONArray listArray = jsonObject.getJSONArray(listRoot);
					if (listArray != null && listArray.length() > 0) {
						for (int j = 0; j < listArray.length(); j++) {
							Map<String, Object> map = new HashMap<String, Object>();
							JSONObject obj = (JSONObject) listArray.opt(j);
							// ID
							map.put("id", obj.getString("id"));
							// 标题
							map.put("title", obj.getString("Title"));
							// 海报大图片,解析海报
							String url =  obj.getString("Thumbnail");
							// 类别
							map.put("category", obj.getString("Category"));
							if (!ValidateUtil.isBlank(url)) {
								Drawable da = ImageServiceImpl.getImageDrawableByUrl(url);
								if (da != null) {
									map.put("img", da);
								} else {
									Drawable defalut = act.getResources().getDrawable(R.drawable.video_cover_default);
									// 设置为默认图片，同时记录要下载的图片名称，带下载完毕后及时刷新列表
									map.put("img", defalut);
									map.put("imgurl", url);
									//添加到下载队列中 TODO 测试
									Map<String, Object> urlmap = new HashMap<String, Object>();
									urlmap.put("imgurl", url);
									urlmap.put("position", j);
									urlmap.put("adapterId", homepage_adapter_today_hit);
									HttpDownloadImpl.addSmallPosterList(urlmap);
								}
							}
							// 解析评分
							String ratingBar = obj.getString("Rating");
							if (!ValidateUtil.isBlank(ratingBar)) {
								float vr = Float.parseFloat(ratingBar);
								if (vr > -1) {
									map.put("ratingBar", vr);
								}
								//.需要转义的
								String[] rs = ratingBar.split("\\.");
								if (rs != null && rs.length > 1) {
									map.put("ratingScore1", rs[0] + ".");
									map.put("ratingScore2", rs[1]);
								}
							}
							list.add(map);
						}
					}
				}

			}
		}
		return list;
	}

	/**
	 * Description: 解析非首页的列表【其他公共列表】
	 * 
	 * @Version1.0 2011-12-21 下午03:02:11 mustang created
	 * @param sb
	 * @param rootName
	 * @param listName
	 * @param listRoot
	 * @param act
	 * @return
	 * @throws JSONException
	 */
	private static Map<String, Object> parseCommonListJson(StringBuilder sb, Context act) throws JSONException {
		Map<String, Object> result = new HashMap<String, Object>();
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		// 通过根名字获得整个JSON对象
		JSONArray listArray = null;
		int total_num = 0;
		JSONObject root = new JSONObject(sb.toString());
		if (root != null) {
			listArray = root.getJSONArray("offerings");
			total_num = root.getInt("total_num");
			result.put("total_num", total_num);
		}

		if (listArray != null && listArray.length() > 0) {
			for (int j = 0; j < listArray.length(); j++) {
				Map<String, Object> map = new HashMap<String, Object>();
				JSONObject obj = (JSONObject) listArray.opt(j);
				// ID
				map.put("id", obj.getString("id"));
				// 标题
				map.put("Title", obj.getString("Title"));
				// 海报大图片,解析海报
				String url = obj.getString("Poster");
				// 类别
				map.put("type", obj.getString("Category"));
				if (!ValidateUtil.isBlank(url)) {
					Drawable da = ImageServiceImpl.getImageDrawableByUrl(url);
					if (da != null) {
						map.put("img", da);
					} else {
						Drawable defalut = act.getResources().getDrawable(R.drawable.video_cover_default);
						// 设置为默认图片，同时记录要下载的图片名称，带下载完毕后及时刷新列表
						map.put("img", defalut);
						map.put("imgurl", url);
					}
				}
				// 解析评分
				String ratingBar = obj.getString("Rating");
				if (!ValidateUtil.isBlank(ratingBar)) {
					float vr = Float.parseFloat(ratingBar);
					if (vr > -1) {
						map.put("ratingBar", vr);
					}
					String[] rs = ratingBar.split(".");
					if (rs != null && rs.length > 1) {
						map.put("ratingScore1", rs[0] + ".");
						map.put("ratingScore2", rs[1]);
					}
				}
				list.add(map);
			}
		}
		result.put("list", list);
		return result;
	}

	/**
	 * Description: 解析offering
	 * 
	 * @Version1.0 2011-12-21 下午03:56:54 mustang created
	 * @param sb
	 * @param act
	 * @return
	 * @throws JSONException
	 */
	private static Map<String, Object> parseOfferingDetailJson(StringBuilder sb, Context act) throws JSONException {
		Map<String, Object> result = new HashMap<String, Object>();
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		// 通过根名字获得整个JSON对象
		JSONArray listArray = null;
		JSONObject root = new JSONObject(sb.toString());
		if (root != null) {
			listArray = root.getJSONArray("episode");
			String director = root.getString("director");
			String actor = root.getString("actor");
			String descrip = root.getString("descrip");
			result.put("director", director);
			result.put("actor", actor);
			result.put("descrip", descrip);
		}

		if (listArray != null && listArray.length() > 0) {
			for (int j = 0; j < listArray.length(); j++) {
				Map<String, Object> map = new HashMap<String, Object>();
				JSONObject obj = (JSONObject) listArray.opt(j);
				map.put("offering_id", obj.getString("offering_id"));
				map.put("episode", obj.getString("episode"));
				list.add(map);
			}
		}
		result.put("list", list);
		return result;
	}

	/**
	 * Description: 解析歌手列表
	 * 
	 * @Version1.0 2011-12-21 下午04:19:12 mustang created
	 * @param sb
	 * @param act
	 * @return
	 * @throws JSONException
	 */
	private static Map<String, Object> parseSingerListJson(StringBuilder sb, Context act) throws JSONException {
		Map<String, Object> result = new HashMap<String, Object>();
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		// 通过根名字获得整个JSON对象
		JSONArray listArray = null;
		JSONObject root = new JSONObject(sb.toString());
		if (root != null) {
			listArray = root.getJSONArray("singer");
			int total_num = root.getInt("total_num");
			result.put("total_num", total_num);
		}

		if (listArray != null && listArray.length() > 0) {
			for (int j = 0; j < listArray.length(); j++) {
				Map<String, Object> map = new HashMap<String, Object>();
				JSONObject obj = (JSONObject) listArray.opt(j);
				map.put("actor", obj.getString("actor"));
				map.put("poster", obj.getString("poster"));
				list.add(map);
			}
		}
		result.put("list", list);
		return result;
	}

	/**
	 * Description: 解析某歌手的歌曲列表
	 * 
	 * @Version1.0 2011-12-21 下午04:33:19 mustang created
	 * @param sb
	 * @param act
	 * @return
	 * @throws JSONException
	 */
	private static Map<String, Object> parseSongsListBySingerJson(StringBuilder sb, Context act) throws JSONException {
		Map<String, Object> result = new HashMap<String, Object>();
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		// 通过根名字获得整个JSON对象
		JSONArray listArray = null;
		JSONObject root = new JSONObject(sb.toString());
		if (root != null) {
			listArray = root.getJSONArray("songs");
			int total_num = root.getInt("total_num");
			result.put("total_num", total_num);
		}

		if (listArray != null && listArray.length() > 0) {
			for (int j = 0; j < listArray.length(); j++) {
				Map<String, Object> map = new HashMap<String, Object>();
				JSONObject obj = (JSONObject) listArray.opt(j);
				map.put("director", obj.getString("director"));
				map.put("title", obj.getString("title"));
				map.put("offering_id", obj.getString("offering_id"));
				map.put("service_name", obj.getString("service_name"));
				list.add(map);
			}
		}
		result.put("list", list);
		return result;
	}

	/**
	 * Description: 解析回看列表
	 * 
	 * @Version1.0 2011-12-21 下午04:50:33 mustang created
	 * @param sb
	 * @param act
	 * @return
	 * @throws JSONException
	 */
	private static Map<String, Object> parseChannelListJson(StringBuilder sb, Context act) throws JSONException {
		Map<String, Object> result = new HashMap<String, Object>();
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		// 通过根名字获得整个JSON对象
		JSONArray listArray = null;
		JSONObject root = new JSONObject(sb.toString());
		if (root != null) {
			listArray = root.getJSONArray("channel");
			int total_num = root.getInt("total_num");
			result.put("total_num", total_num);
		}

		if (listArray != null && listArray.length() > 0) {
			for (int j = 0; j < listArray.length(); j++) {
				Map<String, Object> map = new HashMap<String, Object>();
				JSONObject obj = (JSONObject) listArray.opt(j);
				map.put("name", obj.getString("name"));
				map.put("poster", obj.getString("poster"));
				map.put("id", obj.getString("id"));
				list.add(map);
			}
		}
		result.put("list", list);
		return result;
	}

	/**
	 * Description: 解析回看节目列表
	 * 
	 * @Version1.0 2011-12-21 下午05:00:19 mustang created
	 * @param sb
	 * @param act
	 * @return
	 * @throws JSONException
	 */
	private static Map<String, Object> parseProgramslListJson(StringBuilder sb, Context act) throws JSONException {
		Map<String, Object> result = new HashMap<String, Object>();
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		// 通过根名字获得整个JSON对象
		JSONArray listArray = null;
		JSONObject root = new JSONObject(sb.toString());
		if (root != null) {
			listArray = root.getJSONArray("program");
			int total_num = root.getInt("total_num");
			result.put("total_num", total_num);
		}

		if (listArray != null && listArray.length() > 0) {
			for (int j = 0; j < listArray.length(); j++) {
				Map<String, Object> map = new HashMap<String, Object>();
				JSONObject obj = (JSONObject) listArray.opt(j);
				map.put("title", obj.getString("title"));
				map.put("start_time", obj.getString("start_time"));
				map.put("offering_id", obj.getString("offering_id"));
				map.put("service_name", obj.getString("service_name"));
				list.add(map);
			}
		}
		result.put("list", list);
		return result;
	}

	/**
	 * Description: 解析搜索节目列表，区分电影电视、MTV等
	 * 
	 * @Version1.0 2011-12-21 下午05:05:33 mustang created
	 * @param sb
	 * @param act
	 * @return
	 * @throws JSONException
	 */
	private static Map<String, Object> parseSearchProgramsListJson(StringBuilder sb, Context act) throws JSONException {
		Map<String, Object> result = new HashMap<String, Object>();
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		// 通过根名字获得整个JSON对象
		JSONArray offeringsArray = null;
		JSONArray mtvsArray = null;
		JSONObject root = new JSONObject(sb.toString());
		if (root != null) {
			offeringsArray = root.getJSONArray("offerings");
			mtvsArray = root.getJSONArray("songs");
			int success = root.getInt("success");
			result.put("success", success);
		}

		if (offeringsArray != null && offeringsArray.length() > 0) {
			for (int j = 0; j < offeringsArray.length(); j++) {
				Map<String, Object> map = new HashMap<String, Object>();
				JSONObject obj = (JSONObject) offeringsArray.opt(j);
				map.put("title", obj.getString("title"));
				map.put("poster", obj.getString("type"));
				map.put("offering_id", obj.getString("offering_id"));
				map.put("category", obj.getString("category"));
				map.put("recommend_rank", obj.getString("recommend_rank"));
				map.put("service_name", obj.getString("service_name"));
				list.add(map);
			}
		}
		if (mtvsArray != null && mtvsArray.length() > 0) {
			for (int j = 0; j < mtvsArray.length(); j++) {
				Map<String, Object> map = new HashMap<String, Object>();
				JSONObject obj = (JSONObject) offeringsArray.opt(j);
				map.put("director", obj.getString("director"));
				map.put("actor", obj.getString("actor"));
				map.put("poster", obj.getString("poster"));
				map.put("title", obj.getString("title"));
				map.put("offering_id", obj.getString("offering_id"));
				map.put("service_name", obj.getString("service_name"));
				list.add(map);
			}
		}
		result.put("list", list);
		return result;
	}

	/**
	 * Description: 解析书签列表
	 * 
	 * @Version1.0 2011-12-21 下午05:39:48 mustang created
	 * @param sb
	 * @param act
	 * @return
	 * @throws JSONException
	 */
	private static Map<String, Object> parseBookmarkListJson(StringBuilder sb, Context act) throws JSONException {
		Map<String, Object> result = new HashMap<String, Object>();
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		// 通过根名字获得整个JSON对象
		JSONArray listArray = null;
		JSONObject root = new JSONObject(sb.toString());
		if (root != null) {
			listArray = root.getJSONArray("offerings");
			int total_num = root.getInt("total_num");
			result.put("total_num", total_num);
		}

		if (listArray != null && listArray.length() > 0) {
			for (int j = 0; j < listArray.length(); j++) {
				Map<String, Object> map = new HashMap<String, Object>();
				JSONObject obj = (JSONObject) listArray.opt(j);
				map.put("title", obj.getString("title"));
				map.put("type", obj.getString("type"));
				map.put("offering_id", obj.getString("offering_id"));
				map.put("npt", obj.getString("npt"));
				map.put("run_time", obj.getString("run_time"));
				list.add(map);
			}
		}
		result.put("list", list);
		return result;
	}

	/**
	 * Description: 解析关键字列表
	 * 
	 * @Version1.0 2011-12-21 下午05:12:28 mustang created
	 * @param sb
	 * @return
	 * @throws JSONException
	 */
	private static List<String> parseKeysListJson(StringBuilder sb) throws JSONException {
		List<String> list = new ArrayList<String>();
		// 通过根名字获得整个JSON对象
		JSONArray listArray = null;
		JSONObject root = new JSONObject(sb.toString());
		if (root != null) {
			listArray = root.getJSONArray("");
		}

		if (listArray != null && listArray.length() > 0) {
			for (int j = 0; j < listArray.length(); j++) {
				list.add((String) listArray.get(j));
			}
		}
		return list;
	}

	/**
	 * Description: 解析分类列表
	 * 
	 * @Version1.0 2011-12-21 下午06:33:40 mustang created
	 * @param sb
	 * @return
	 * @throws JSONException
	 */
	private static List<Map<String, Object>> parseCatagorysListJson(StringBuilder sb) throws JSONException {
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		// 通过根名字获得整个JSON对象
		JSONArray listArray = null;
		JSONObject root = new JSONObject(sb.toString());
		if (root != null) {
			listArray = root.getJSONArray("");
		}

		if (listArray != null && listArray.length() > 0) {
			for (int j = 0; j < listArray.length(); j++) {
				JSONObject obj = (JSONObject) listArray.opt(j);
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("treeIndex", obj.getString("treeIndex"));
				map.put("name", obj.getString("name"));
				list.add(map);
			}
		}
		return list;
	}

	/**
	 * 从下载队列中下载图片，避免重复下载
	 * 
	 * @Version1.0 2011-12-12 上午11:01:53 mustang created
	 * @param bp
	 * @param listViewId
	 *            需要指定下载哪个listview数据
	 * @param position
	 *            需要指定下载哪个位置的数据
	 * @param activity
	 * @throws IOException
	 */
	private static void downloadSmallPostersList() throws IOException {
		while (smallPostersRunFlag == false && !smallDownloadPostersList.isEmpty()) {
			String dpath = Constant.download_dir;
			smallPostersRunFlag = true;
			Map<String, Object> map = smallDownloadPostersList.get(smallDownloadPostersList.size() - 1);
			// 获取下载信息
			String url = (String) map.get("imgurl");
			int adapterId = (Integer) map.get("adapterId");
			int postrion = (Integer) map.get("position");
			//去除重复
			for(int i=0;i<smallDownloadPostersList.size()-2;i++){
				Map<String,Object> old = smallDownloadPostersList.get(i);
				String imgurl = (String) old.get("imgurl");
				if(!ValidateUtil.isBlank(url)&&url.equals(imgurl)){
					smallDownloadPostersList.remove(old);
				}
			}
			// 先去找该图片是否已经下载过，如已下载则从队列中删除
			Drawable drawable = ImageServiceImpl.getImageDrawableByUrl(url);
			if (drawable == null) {
				// 下载图片
				URL imageurl = new URL(url);
				HttpURLConnection conn = (HttpURLConnection) imageurl.openConnection();
				conn.setConnectTimeout(3 * 1000);
				conn.setRequestMethod("GET");
				conn.setDoInput(true);
				conn.connect();
				InputStream is = conn.getInputStream();
				Bitmap bp = BitmapFactory.decodeStream(is);
				is.close();
				String[] names = url.split("/");
				String filename = "";
				if (names.length > 0) {
					filename = names[names.length - 1];
				}
				if (bp != null && !ValidateUtil.isBlank(filename)) {
					FileOutputStream fos = new FileOutputStream(new File(dpath, filename));
					bp.compress(Bitmap.CompressFormat.PNG, 100, fos);
					fos.close();
				}
			}
			// 刷新listview
			notifyDataSetChanged(adapterId, postrion);
			// 从队列中主动删除已经下载的URL
			smallDownloadPostersList.remove(smallDownloadPostersList.size() - 1);
			smallPostersRunFlag = false;
		}
		if(smallDownloadPostersList.isEmpty()){
			if (!smallPosterThread.isAlive()) {
				smallPosterThread.interrupt();
			}
		}
		

	}

	/**
	 * Description: 下载首页大海报
	 * 
	 * @Version1.0 2011-12-26 上午11:08:06 mustang created
	 * @throws IOException
	 */
	private static void downloadBigPostersList() throws IOException {
		while (bigPostersRunFlag == false && !bigDownloadPostersList.isEmpty()) {
			bigPostersRunFlag = true;
			Map<String, String> map = bigDownloadPostersList.get(bigDownloadPostersList.size() - 1);
			// 获取下载信息
			String url = (String) map.get("imgurl");
			String id = (String) map.get("id");
			//去重
			// 如果该队列中已经包含该下载信息，则要先出队列再进入队尾，提升下载优先级
			for(int i=0;i<bigDownloadPostersList.size()-2;i++){
				Map<String,String> old = bigDownloadPostersList.get(i);
				String vid = (String) old.get("id");
				if(!ValidateUtil.isBlank(vid)&&vid.equals(id)){
					bigDownloadPostersList.remove(old);
				}
			}
			
			Drawable drawable = downloadImageByUrl(url);
			if (drawable != null) {
				bigPoster.put(id, drawable);
				// TODO 下载完后通知
				// notifyDataSetChanged(adapterId, postrion);
			}
			
			// 从队列中主动删除已经下载的URL
			bigDownloadPostersList.remove(bigDownloadPostersList.size() - 1);
			bigPostersRunFlag = false;
		}
		//下载队列为空，中断线程
		if(bigDownloadPostersList.isEmpty()){
			if(bigPosterThread.isAlive()){
				bigPosterThread.interrupt();
			}
			
		}

	}

	/**
	 * Description:下载一张图片
	 * 
	 * @Version1.0 2011-12-20 下午03:05:57 mustang created
	 * @param activity
	 * @throws IOException
	 */
	private static Drawable downloadImageByUrl(String url) throws IOException {
		// url = "http://192.168.7.95:8090/1.jpg";
		Drawable drawable = null;
		if (!ValidateUtil.isBlank(url)) {
			String[] urls = url.split("/");
			String srcName = "";
			if (urls.length > 0) {
				srcName = urls[urls.length - 1];
			}
			URL imageurl = new URL(url);
			HttpURLConnection conn = (HttpURLConnection) imageurl.openConnection();
			conn.setConnectTimeout(5 * 1000);
			conn.setRequestMethod("GET");
			conn.setDoInput(true);
			conn.connect();
			InputStream is = conn.getInputStream();
			drawable = Drawable.createFromStream(is, srcName);
			is.close();
		}
		return drawable;

	}

	/**
	 * Description: 刷新列表，这里为了方便,需要activity中定义静态的Adapeter
	 * 
	 * @Version1.0 2011-12-21 上午10:08:27 mustang created
	 * @param adapterId
	 * @param postrion
	 */
	private static void notifyDataSetChanged(int adapterId, int postrion) {
		if (adapterId > 0) {
			BaseAdapter adapter = null;
			switch (adapterId) {
			case homepage_adapter_today_hit: {
				adapter = Homepage.today_hit_adapter;
				if (adapter != null && postrion > -1) {
					Map<String, Object> map = (Map<String, Object>) adapter.getItem(postrion);
					String url = (String) map.get("imgurl");
					if (ValidateUtil.isBlank(url)) {
						Drawable da = ImageServiceImpl.getImageDrawableByUrl(url);
						if (da != null) {
							map.put("img", da);
							// 下载完毕清空，imgurl
							map.put("imgurl", "");
							adapter.notifyDataSetChanged();
						}
					}
				}
			}
				break;
			case homepage_adapter_latest_online: {
				adapter = Homepage.today_hit_adapter;
				if (adapter != null && postrion > -1) {
					Map<String, Object> map = (Map<String, Object>) adapter.getItem(postrion);
					String url = (String) map.get("imgurl");
					if (ValidateUtil.isBlank(url)) {
						Drawable da = ImageServiceImpl.getImageDrawableByUrl(url);
						if (da != null) {
							map.put("img", da);
							// 下载完毕清空，imgurl
							map.put("imgurl", "");
							adapter.notifyDataSetChanged();
						}
					}
				}
			}
				break;
			case homepage_adapter_home_theater: {
				adapter = Homepage.today_hit_adapter;
				if (adapter != null && postrion > -1) {
					Map<String, Object> map = (Map<String, Object>) adapter.getItem(postrion);
					String url = (String) map.get("imgurl");
					if (ValidateUtil.isBlank(url)) {
						Drawable da = ImageServiceImpl.getImageDrawableByUrl(url);
						if (da != null) {
							map.put("img", da);
							// 下载完毕清空，imgurl
							map.put("imgurl", "");
							adapter.notifyDataSetChanged();
						}
					}

				}
			}
				break;
			case homepage_adapter_tv_playhouse: {
				adapter = Homepage.today_hit_adapter;
				if (adapter != null && postrion > -1) {
					Map<String, Object> map = (Map<String, Object>) adapter.getItem(postrion);
					String url = (String) map.get("imgurl");
					if (ValidateUtil.isBlank(url)) {
						Drawable da = ImageServiceImpl.getImageDrawableByUrl(url);
						if (da != null) {
							map.put("img", da);
							// 下载完毕清空，imgurl
							map.put("imgurl", "");
							adapter.notifyDataSetChanged();
						}
					}
				}
			}
				break;
			case homepage_adapter_top_singer: {
				adapter = Homepage.today_hit_adapter;
				if (adapter != null && postrion > -1) {
					Map<String, Object> map = (Map<String, Object>) adapter.getItem(postrion);
					String url = (String) map.get("imgurl");
					if (ValidateUtil.isBlank(url)) {
						Drawable da = ImageServiceImpl.getImageDrawableByUrl(url);
						if (da != null) {
							map.put("img", da);
							// 下载完毕清空，imgurl
							map.put("imgurl", "");
							adapter.notifyDataSetChanged();
						}
					}
				}
			}
				break;
			// TODO 其他列表adapter
			default:
				break;

			}
		}
	}

	/**
	 * 列表中的海报下载队列
	 */
	private static List<Map<String, Object>> smallDownloadPostersList = Collections.synchronizedList(new LinkedList<Map<String, Object>>());
	/**
	 * 首页大海报下载
	 */
	private static List<Map<String, String>> bigDownloadPostersList = Collections.synchronizedList(new LinkedList<Map<String, String>>());

	/**
	 * Description: 添加到下载队列,注意MAP的数据格式，position根据需要决定是否传入
	 * 
	 * @Version1.0 2011-12-23 下午04:23:29 mustang created
	 * @param map
	 */
	public static void addSmallPosterList(Map<String, Object> map) {
		/*
		 * map.put("imgurl", "imgurl"); map.put("adapterId", 100);
		 * map.put("position", 100);
		 */
		smallDownloadPostersList.add(map);
		if (!smallPosterThread.isAlive()) {
			smallPosterThread.start();
			Handler downloadListPostersHandler = new Handler(smallPosterThread.getLooper());
			downloadListPostersHandler.post(downloadSmallPostersrunnable);
		}
	}

	/**
	 * Description:添加到首页海报下载列表
	 * 
	 * @Version1.0 2011-12-26 上午10:21:14 mustang created
	 * @param map
	 */
	public static void addBigPosterList(Map<String, String> map) {
		/*String id = map.get("id");
		// 如果该队列中已经包含该下载信息，则要先出队列再进入队尾，提升下载优先级
		for (Map<String, String> download : bigDownloadPostersList) {
			String vid = download.get("id");
			if(!ValidateUtil.isBlank(vid)&&vid.equals(id)){
				bigDownloadPostersList.remove(download);
			}
		}*/
		bigDownloadPostersList.add(map);
		if (!bigPosterThread.isAlive()) {
			bigPosterThread.start();
			Handler downloadBigPostersHandler = new Handler(bigPosterThread.getLooper());
			downloadBigPostersHandler.post(downloadBigPostersrunnable);
		}
	}

	/**
	 * （小海报）当前是否正在下载图片，如果正在下载则需要待下载完才能够再次下载队尾图片
	 */
	private static boolean smallPostersRunFlag = false;
	/**
	 * （大海报）当前是否正在下载图片，如果正在下载则需要待下载完才能够再次下载队尾图片
	 */
	private static boolean bigPostersRunFlag = false;

	/**
	 * 下载所有列表海报的线程
	 */
	private static HandlerThread smallPosterThread = new HandlerThread("smallPosterThread");

	private static Runnable downloadSmallPostersrunnable = new Runnable() {
		@Override
		public void run() {

			try {
				HttpDownloadImpl.downloadSmallPostersList();
			} catch (IOException e) {
				e.printStackTrace();
				// TODO 这里出错时，应该把list中当前下载位置变换一下，暂时不下载他，待完成
			}

		}
	};

	/**
	 * 下载首页推荐大海报
	 */
	private static HandlerThread bigPosterThread = new HandlerThread("bigPosterThread");
	
	private static Runnable downloadBigPostersrunnable = new Runnable() {
		@Override
		public void run() {
			try {
				HttpDownloadImpl.downloadBigPostersList();
			} catch (IOException e) {
				e.printStackTrace(); // TODO 这里出错时，应该把list中当前下载位置变换一下，暂时不下载他，待完成
			}

		}
	};

}
