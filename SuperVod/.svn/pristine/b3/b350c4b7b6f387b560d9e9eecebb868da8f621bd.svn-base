package com.stv.supervod.service;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.http.client.ClientProtocolException;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Environment;
import android.widget.BaseAdapter;

import com.stv.supervod.activity.Homepage;
import com.stv.supervod.activity.R;
import com.stv.supervod.utils.Constant;
import com.stv.supervod.utils.ValidateUtil;

public class HttpDownloadImpl {

	/**
	 * 所有需要下载海报的列表都需要在此定义表示，便于下载完毕后刷新页面
	 */
	public static final int homepage_adapter_todayhit = 100;

	public static List<String> nowDownloadList = Collections.synchronizedList(new ArrayList<String>());
	private static boolean runFlag = false;

	/**
	 * Description: 首页列表数据下载
	 * 
	 * @Version1.0 2011-12-13 下午02:03:59 mustang created
	 * @param act
	 * @return
	 * @throws ClientProtocolException
	 * @throws IOException
	 * @throws JSONException
	 */
	public static Map<String, List<Map<String, Object>>> dowaloadHomePageData(Activity act) throws ClientProtocolException, IOException,
			JSONException {
		StringBuilder sb = HttpRequestServiceImpl.requestByHttpClient("", Constant.HOMEPAGE_DATA_URL);
		System.out.println(sb.toString());
		Map<String, List<Map<String, Object>>> map = new HashMap<String, List<Map<String, Object>>>();
		List<Map<String, Object>> posters = parsePosterJson(sb, "recommand", "Offerings", act);
		List<Map<String, Object>> todaylist = parseListJson(sb, "list", "今日热播", "Offerings", "01", act);

		map.put("today_hit", todaylist);
		map.put("posters", posters);
		return map;
	}

	/**
	 * Description: 解析服务器下发的JSON对象、数组
	 * 
	 * @Version1.0 2011-12-13 下午01:11:12 mustang created
	 * @param sb
	 * @param rootName
	 * @param listName
	 * @param act
	 * @return
	 * @throws JSONException
	 * @throws IOException
	 */
	public static List<Map<String, Object>> parsePosterJson(StringBuilder sb, String rootName, String listName, Activity act) throws JSONException,
			IOException {
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		JSONObject root = new JSONObject(sb.toString());
		JSONArray rootArray = null;
		if (root != null) {
			rootArray = root.getJSONArray(rootName);
		}
		if (rootArray != null && rootArray.length() > 0) {
			JSONObject objroot = (JSONObject) rootArray.get(0);
			JSONArray listArray = objroot.getJSONArray(listName);
			for (int i = 0; i < listArray.length(); i++) {
				Map<String, Object> map = new HashMap<String, Object>();
				JSONObject obj = (JSONObject) listArray.opt(i);
				// ID
				map.put("id", obj.getString("id"));
				// 标题
				map.put("Title", obj.getString("Title"));
				// 海报大图片,解析海报
				String url = "";
				if (rootName.equals("recommand")) {
					url = obj.getString("Poster");
				}
				Bitmap bp = null;
				if (url != "") {
					bp = downloadImageByUrl(act, url);
				}
				if (bp != null) {
					map.put("img", bp);
				}
				// 类别
				map.put("type", obj.getString("Category"));
				// 解析评分
				String ratingBar = obj.getString("Rating");
				if (!ValidateUtil.isBlank(ratingBar)) {
					float vr = Float.parseFloat(ratingBar);
					if (vr > -1) {
						map.put("ratingBar", vr);
					}
					String[] rs = ratingBar.split(".");
					if (rs != null && rs.length > 1) {
						map.put("ratingScore1", rs[0] + ".");
						map.put("ratingScore2", rs[1]);
					}
				}
				list.add(map);
			}
		}
		return list;
	}

	/**
	 * Description: 解析列表数据
	 * 
	 * @Version1.0 2011-12-20 上午11:24:11 mustang created
	 * @param sb
	 *            sb 从服务器下载的JSON串
	 * @param rootName
	 *            一级根节点
	 * @param listName
	 *            二级节点名字
	 * @param listRoot
	 *            二级节点名称
	 * @param act
	 * @return
	 * @throws JSONException
	 */
	public static List<Map<String, Object>> parseListJson(StringBuilder sb, String rootName, String listName, String listRoot, String listViewId,
			Activity act) throws JSONException {
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		// 通过根名字获得整个JSON对象
		JSONArray typeArray = null;
		JSONObject root = new JSONObject(sb.toString());
		if (root != null) {
			typeArray = root.getJSONArray(rootName);
		}
		if (typeArray != null && typeArray.length() > 0) {
			for (int i = 0; i < typeArray.length(); i++) {
				JSONObject jsonObject = (JSONObject) typeArray.get(i);
				String title = "";
				if (jsonObject != null) {
					title = (String) jsonObject.get("Name");
				}

				if (title != "" && title.equals(listName)) {
					JSONArray listArray = jsonObject.getJSONArray(listRoot);
					if (listArray != null && listArray.length() > 0) {
						for (int j = 0; j < listArray.length(); j++) {
							Map<String, Object> map = new HashMap<String, Object>();
							JSONObject obj = (JSONObject) listArray.opt(j);
							// ID
							map.put("id", obj.getString("id"));
							// 标题
							map.put("Title", obj.getString("Title"));
							// 海报大图片,解析海报
							String url = "";
							if (rootName.equals("recommand")) {
								url = obj.getString("Poster");
							} else {
								url = obj.getString("Thumbnail");
							}
							// 类别
							map.put("type", obj.getString("Category"));
							if (!ValidateUtil.isBlank(url)) {
								String[] urls = url.split("/");
								if (urls != null && urls.length > 0) {
									String imgname = urls[urls.length - 1];
									Drawable da = ImageServiceImpl.getImageDrawable(imgname, act);
									if (da != null) {
										map.put("img", da);
									} else {
										Drawable defalut = act.getResources().getDrawable(R.drawable.video_cover_default);
										// 设置为默认图片，同时记录要下载的图片名称，带下载完毕后及时刷新列表
										map.put("img", defalut);
										map.put("imgurl", url);
									}
								}
							}
							// 解析评分
							String ratingBar = obj.getString("Rating");
							if (!ValidateUtil.isBlank(ratingBar)) {
								float vr = Float.parseFloat(ratingBar);
								if (vr > -1) {
									map.put("ratingBar", vr);
								}
								String[] rs = ratingBar.split(".");
								if (rs != null && rs.length > 1) {
									map.put("ratingScore1", rs[0] + ".");
									map.put("ratingScore2", rs[1]);
								}
							}
							list.add(map);
						}
					}
				}

			}
		}
		return list;
	}

	/**
	 * Description: 保存文件 文件夹路径格式：有sdcard情况
	 * /mnt/sdcard/com.com.stv.supervod.activity/files
	 * 无sdcard情况是：/date/date/com.com.stv.supervod.activity/files
	 * 1、维护一个固定长度为5的FIFO的队列 2、如果当前正在下载，并且更换了队列则等下载完再次下载最新的更新
	 * 
	 * @Version1.0 2011-12-12 上午11:01:53 mustang created
	 * @param bp
	 * @param listViewId
	 *            需要指定下载哪个listview数据
	 * @param position
	 *            需要指定下载哪个位置的数据
	 * @param activity
	 * @throws IOException
	 */
	public static void downloadImageList(Context activity, int adapterId, int postrion) throws IOException {

		File dir = null;
		// 外置存储卡需要配置权限
		if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
			dir = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/" + activity.getPackageName() + "/files");
			if (!dir.exists()) {
				dir.mkdirs();
			}
		} else {
			dir = activity.getFilesDir();
		}
		String dpath = dir.getAbsolutePath();
		while (runFlag == false && nowDownloadList.get(nowDownloadList.size() - 1) != null) {
			runFlag = true;
			String url = nowDownloadList.get(nowDownloadList.size() - 1);
			URL imageurl = new URL(url);
			HttpURLConnection conn = (HttpURLConnection) imageurl.openConnection();
			conn.setDoInput(true);
			conn.connect();
			InputStream is = conn.getInputStream();
			Bitmap bp = BitmapFactory.decodeStream(is);
			is.close();
			String[] names = url.split("/");
			String filename = "";
			if (names.length > 0) {
				filename = names[names.length - 1];
			}
			if (bp != null && !ValidateUtil.isBlank(filename)) {
				Uri uri = Uri.fromFile(new File(dpath, filename));
				OutputStream os = activity.getContentResolver().openOutputStream(uri);
				bp.compress(Bitmap.CompressFormat.PNG, 100, os);
				os.close();
			}
			//刷新listview
			notifyDataSetChanged(adapterId,postrion,activity);
			//从队列中主动删除已经下载的URL
			nowDownloadList.remove(nowDownloadList.size() - 1);
			runFlag = false;
		}

	}

	/**
	 * Description:下载一张图片
	 * 
	 * @Version1.0 2011-12-20 下午03:05:57 mustang created
	 * @param activity
	 * @throws IOException
	 */
	public static Bitmap downloadImageByUrl(Activity activity, String url) throws IOException {
		Bitmap bp = null;
		if (!ValidateUtil.isBlank(url)) {
			URL imageurl = new URL(url);
			HttpURLConnection conn = (HttpURLConnection) imageurl.openConnection();
			conn.setDoInput(true);
			conn.connect();
			InputStream is = conn.getInputStream();
			bp = BitmapFactory.decodeStream(is);
			is.close();
		}
		return bp;

	}

	/**
	 * Description: 刷新列表，这里为了方便,需要activity中定义静态的Adapeter
	 * 
	 * @Version1.0 2011-12-21 上午10:08:27 mustang created
	 * @param adapterId
	 * @param postrion
	 */
	public static void notifyDataSetChanged(int adapterId, int postrion, Context act) {
		if (adapterId > 0) {
			BaseAdapter adapter = null;
			switch (adapterId) {
			case homepage_adapter_todayhit: {
				adapter = Homepage.today_hit_adapter;
				if (adapter != null) {
					adapter.getItem(postrion);
					updateListItemImage((Map<String, Object>) adapter.getItem(postrion), act);
				}
			}
			break;

			}
		}
	}

	/**
	 * Description: 更新某条数据海报，同时清空海报url
	 * 
	 * @Version1.0 2011-12-21 上午10:36:12 mustang created
	 * @param url
	 * @param map
	 * @param act
	 */
	public static void updateListItemImage(Map<String, Object> map, Context act) {

		if (map != null) {
			String url = (String) map.get("imaurl");
			String[] urls = null;
			if (ValidateUtil.isBlank(url)) {
				urls = url.split("/");
			}
			if (urls != null && urls.length > 0) {
				String imgname = urls[urls.length - 1];
				Drawable da = ImageServiceImpl.getImageDrawable(imgname, act);
				if (da != null) {
					map.put("img", da);
					// 下载完毕清空，imgurl
					map.put("imgurl", "");
				}
			}
		}
	}

}
