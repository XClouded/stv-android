package com.stv.supervod.service;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.SocketChannel;


public class Connect2RCServer extends Thread{
	private final String RcServerIp = "192.168.14.208";
	private final String RcServerPort = "5008";

	private final int timeout = 100; //100ms延时处理
	private boolean flag=false;
	
	public static Selector selector;
	public static SocketChannel channel;
	
    private static  final Connect2RCServer c2r=new Connect2RCServer();
    
	private Connect2RCServer(){		
	}
	
	public static Connect2RCServer getInstance(){		
		return c2r;
	}
	@Override
	public void run() {
		// TODO Auto-generated method stub
		try {
			while(!flag){
				//定义一个记录套接字通道事件的对象
				selector = Selector.open();
				//定义异步客户端
				channel = SocketChannel.open(); 
				//将客户端设定为异步
				channel.configureBlocking (false);  
				//建立连接，此方法是异步
				channel.connect(new InetSocketAddress(
						RcServerIp, Integer.parseInt(RcServerPort)));
				//在轮讯对象中注册此客户端的读取事件
				channel.register(selector, SelectionKey.OP_READ);
				//我们通过持续调用finishConnect()方法来“轮询”连接状态，该方法在连接成功建立之前一直返回false
				long firsttime = System.currentTimeMillis();
				while(!channel.finishConnect()) {
					if (System.currentTimeMillis() - firsttime >= 2000) {
						throw new IOException("Connection Failure");
					}
				};
				if(channel!=null){
					flag=true;
				}
			}											
            
		} catch (IOException e) {
			// TODO: handle exception
			e.printStackTrace();
			try{
				throw new IOException("Connection Failure");
			}catch(Exception ee){
				ee.printStackTrace();
			}
			
		}	
	}	
	
	public boolean getConnectionStatus(){
		return flag;
	}
	
	//close socket
	public  void closeSocket(){
		if(channel!=null){
			if(channel.isConnected()){
				try {
					channel.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}		
	}	

}
