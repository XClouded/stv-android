package com.stv.supervod.service;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.util.Log;

import com.stv.supervod.activity.Play;
import com.stv.supervod.activity.R;
import com.stv.supervod.exception.ErrorCodeException;
import com.stv.supervod.service.HttpDownloadImpl.KeyEnum;
import com.stv.supervod.utils.Constant.PlayerType;
import com.stv.supervod.utils.VideoConstant;


public class VideoService extends Service{
	private static final String TAG = "VideoService";	
	private final int timeover = 10000;        //10s登陆超时
	private int currentTime;
	private  TCPClient client;
	private boolean isApply;
	private Handler timer;
    private VideoServiceImpl service;

	private Bundle bundle;
	private NotificationManager notificationMrg;
	
	public VideoService(){
		
	}
	
	@Override
	public IBinder onBind(Intent intent) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void onCreate() {	
		Log.d(TAG, "enter into oncreate method.");
		super.onCreate();
		timer=new Handler();
		client=new TCPClient(handler);
        service=VideoServiceImpl.getInstance(); 
        service.setClient(client);
//        isApply=true;
//       	notificationMrg=(NotificationManager) this.getSystemService(NOTIFICATION_SERVICE);
//		displayNotificationMessage("supervod is running");
//		Thread thr=new Thread(null,new ServiceWorker(),"SuperVodService");
//		thr.start();
	}
	
	private void displayNotificationMessage(String message) {		
		Notification notification=new Notification(R.drawable.icon,message,System.currentTimeMillis());
		PendingIntent contentIntent=PendingIntent.getActivity(this, 0, new Intent(this,Play.class), 0);
		notification.setLatestEventInfo(this, "SuperVod", message, contentIntent);
		notificationMrg.notify(R.id.app_notification_id,notification);
	}
	//处理接收的数据
	class ServiceWorker implements Runnable{
		
		public void run(){
			//do something
			try {
				while(true){
					Thread.sleep(1000);
					service.SendHeardBeat();
				}
				
			} catch (ErrorCodeException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	    	
	
	
	@Override
	public void onStart(Intent intent, int startId) {
		Log.d(TAG, "enter into onstart method.");		
		super.onStart(intent, startId);
		
		int op = intent.getIntExtra("op", -1);
		if (op!=-1){
			switch (op) {
			case VideoConstant.VIDEO_PLAY:
                try {
					play(0);
				} catch (ErrorCodeException e2) {
					// TODO Auto-generated catch block
					e2.printStackTrace();
				}
				break;
			case VideoConstant.VIDEO_PAUSE:
                try {
					pause();
				} catch (ErrorCodeException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				break;
			case VideoConstant.VIDEO_STOP://停止
				try {
					stop();
				} catch (ErrorCodeException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				break;
			case VideoConstant.PROGRESS_CHANGE:
			    currentTime = intent.getExtras().getInt("progress");
			    try {
					play(currentTime);
				} catch (ErrorCodeException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				break;
			case VideoConstant.VIDEO_REWIND:
				try {
					rewind();
				} catch (ErrorCodeException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				break;
			case VideoConstant.VIDEO_FORWARD:
				try {
					forward();
				} catch (ErrorCodeException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				break;
			case VideoConstant.VIDEO_APPLY_SERVICE:
				try {
					if(!isApply){
						applyService();
					}
					
				} catch (ErrorCodeException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				break;
			case VideoConstant.PLAY:
				Bundle bd=intent.getBundleExtra("info");
				try {
					playVedio(bd);
				} catch (ErrorCodeException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				break;
			case VideoConstant.QUERY_STATUS: //for 
				try {
					service.myvodState();
				} catch (ErrorCodeException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			} 
		}
	}
	
	
	private void playVedio(Bundle bd) throws ErrorCodeException{
		// TODO Auto-generated method stub	
		
		String type=bd.getString(KeyEnum.type.toString());
		
		
		if(type.equals(PlayerType.common.toString())){
			
			boolean isBookmark=bd.getBoolean(KeyEnum.bookmark.toString());
			byte bm;
			if(isBookmark){
				bm=0;
			}else{
				bm=1;
			}
			String offeringId=bd.getString(KeyEnum.offeringId.toString());
			service.setOfferingId(offeringId);
			service.commPlay(offeringId, bm);
		}
		else if(type.equals(PlayerType.my_mtv.toString())){
			String offeringId=bd.getString(KeyEnum.offeringId.toString());
			String channelId=bd.getString(KeyEnum.channelId.toString());
			String playMode=bd.getString(KeyEnum.play_mode.toString());
			int playCount=bd.getInt(KeyEnum.play_count.toString());
			service.setOfferingId(offeringId);
			service.myvodMtvPlay(Byte.decode(playMode), playCount, channelId, offeringId);			
		}
		else if(type.equals(PlayerType.my_movie.toString())){
			String channelId=bd.getString(KeyEnum.channelId.toString());
			String offeringId=bd.getString(KeyEnum.offeringId.toString());			
			boolean isBookmark=bd.getBoolean(KeyEnum.bookmark.toString());
			byte bm;
			if(isBookmark){
				bm=0;
			}else{
				bm=1;
			}
			service.setOfferingId(offeringId);
			service.myvodMoviePlay(channelId, offeringId, bm);
		}
		else{
			
		}		
	}

	//登陆vod服务器申请服务
	private void applyService() throws ErrorCodeException{
		// TODO Auto-generated method stub
		isApply=true;
		SharedPreferences sp=getSharedPreferences("registerinfo", MODE_PRIVATE);
		String username=sp.getString("user", "");
		String password=sp.getString("psd", "");
		String isPassword=sp.getString("ispsd", "");
		
		service.appService(username, password, isPassword);
		
	}

	private void stop() throws ErrorCodeException{
		// TODO Auto-generated method stub
		notificationMrg.cancel(R.id.app_notification_id);
		service.stopPlay();
		
	}

	private void play(int startTime) throws ErrorCodeException{
		service.PlayControl((byte)VideoConstant.VIDEO_PLAY,startTime);
		
	}

	private void pause() throws ErrorCodeException{
		service.PlayControl((byte)VideoConstant.VIDEO_PAUSE,-1);
	}

	private void rewind() throws ErrorCodeException{
		// TODO Auto-generated method stub
		service.PlayControl((byte)VideoConstant.VIDEO_REWIND,-1);
		
	}

	private void forward() throws ErrorCodeException{
		service.PlayControl((byte)VideoConstant.VIDEO_FORWARD,-1);
	}

	@Override
	public void onDestroy() {		
		super.onDestroy();
		notificationMrg.cancel(R.id.app_notification_id);
		
	}
	
	private Runnable loginTimeover = new Runnable() {
		@Override
		public void run() {
			// TODO Auto-generated method stub					
			timer.removeCallbacks(loginTimeover);
		}
	};

		
	private void sendBroadcastInfo(int beginStation, int duration) {
		 Intent intent= new Intent();
         intent.setAction(VideoConstant.VIDEO_CURRENT);
         intent.putExtra("currentTime", beginStation);
         intent.putExtra("duration", duration);
		 sendBroadcast(intent);
		
	}
	 
    Handler progressHandler = new Handler()
    {
    	public void handleMessage(Message msg)
    	{
    		if(msg.arg1<=100){
    			sendBroadcastInfo(msg.arg1,100);
    			progressHandler.post(handlerThread);
    		}
    		
    	}
    };
    
    Runnable handlerThread = new Runnable()
    {
    	int i = currentTime;
    	public void run()
    	{
    		System.out.println("开始线程");
    		i = i + 10;
    		/**
    		 * 得到一个消息对象，Message类是由android操作系统提供
    		 * obtainMessage方法用来得到Message对象
    		 */
    		Message msg = progressHandler.obtainMessage();
    		/**
    		 * Message中有个成员变量，即msg独享的arg1参数
    		 * 将其值设置为i。用arg1或arg2这两个成员变量传递
    		 * 消息，优点是系统性能消耗较少
    		 */
    		msg.arg1 = i;
    		try {
    			//当前线程休眠1秒
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			/**
			 * 发送一个消息，用sendMessage是将msg加入到消息
			 * 队列中。而post是将线程加入到线程队列中
			 */
    		progressHandler.sendMessage(msg);
			if( i > 100)
			{
				/**
				 * 如果i=100的时候，就将线程对象
				 * 从handler当中移除
				 */
				progressHandler.removeCallbacks(handlerThread);
//				bar.setVisibility(View.GONE);
			}
    	}
    };
    
	protected void dialogSysinfo(String string) {
		// TODO Auto-generated method stub
		
	}
	public void cancleLoginDialog() {
//		loginDialog.cancel();
	}
	/**
	 * Handle message from RCServer
	 */
    private Handler handler = new Handler() {
		@Override
		public void handleMessage(Message msg){   		
    	
    		String info="";
    		int errorCode=msg.arg1;
    		if(errorCode==1001){//网络连接失败
    			info="网络连接失败";
    			Intent in=new Intent("com.supervod.play");
    			sendBroadcast(in);
    		}else{
    			bundle=msg.getData();
    			byte type=bundle.getByte("type");
        		byte operationCode=bundle.getByte("operationCode");
        	    if(operationCode==VideoConstant.FAIL_NOT_EXIST_USER){
    				info = "服务器验证无此用户";   				  				
    			}
    			else if(operationCode==VideoConstant.FAIL_SYSTEM_ERROR){
    				info="VOD系统错误";  				
    			}
    			else if(operationCode==VideoConstant.FAIL_MULTI_ACTIVE_USER){
    				info="其他用户已经登陆";    				
    			}
    			else if(operationCode==VideoConstant.FAIL_SYSTEM_MAINTAINING){
    				info = "VOD系统维护中";   				    			
    			}
    			else if(operationCode==VideoConstant.FAIL_PASSWORD_ERROR){
    				info = "密码错误";   				
    			}
    			else if(operationCode==VideoConstant.FAIL_NOT_EXIST_RESOURCE){
    				info="资源不存在";        			    				
    			}
    			else if(operationCode==VideoConstant.FAIL_RESOURCE_NOT_ENOUGH){
    				info="资源不足";    				
    			}    			
    			else if(operationCode==VideoConstant.FAIL_CA_SWITHCHFREP){
    				info="CA系统切换频点失败";    				    				
    			}    			
    			else if(operationCode==VideoConstant.FAIL_SESSION_NOT_EXIST){
    				info="会话已经不存在,请重新连接"; 
    			}
    			else if(operationCode==VideoConstant.FAIL_ILLEGAL_DATA){
    				info="非法数据";
    			}
    			else if(operationCode==VideoConstant.SUCCESS_PLAY){
    				info="成功播放";
    			}
    			else if(operationCode==VideoConstant.SUCCESS_PAUSE){
    				info="成功暂停";
    			}
    			else if(operationCode==VideoConstant.SUCCESS_FINISHED_PLAY){
    				info="点播节目已播放完成";
    				   			
    			}
    			else{
    				info="全部播放完成";
    			}
        	    if(operationCode!=VideoConstant.SUCCESS_PLAY||operationCode!=VideoConstant.SUCCESS_PAUSE||
        	    		operationCode!=VideoConstant.SUCCESS_FINISHED_PLAY||operationCode==VideoConstant.SUCCESS_ALL_FINISHED_PLAY){
        	    	Intent intent=new Intent("com.supervod.error");
        	    	intent.putExtra("error", info);
        	    	sendBroadcast(intent);
        	    }
        		switch(type){
        		case VideoConstant.APPLY_SERVICE: //申请服务
        			if(operationCode==VideoConstant.SUCCESS_PLAY){
        				
        				int beginStation=bundle.getShort("nptBegin");
        				int duration=bundle.getShort("nptTotal");
        				Intent intent1=new Intent("com.supervod.applyService");
        				intent1.putExtra("nptBegin", beginStation);
        				intent1.putExtra("nptTotal", duration);
        				sendBroadcast(intent1);   				
        			}
        			
        			
    								
    				break;
    				
        		case VideoConstant.MTV_BATCH_PLAY://mtv play
//        			rcServerListener.getVodMtvPlayResult(bundle);
        			
        		case VideoConstant.VIDEO_BATCH_PLAY:
//        			rcServerListener.getVodMoviePlayResult(bundle);
        			
        		case VideoConstant.SINGLE_PLAY:
        			Intent intent=new Intent("com.supervod.play");
        			if(operationCode==VideoConstant.SUCCESS_PLAY){
        				service.setStatus(true); //设置该视频已播放
        				
        				
        			}
        			int beginStation=bundle.getShort("nptBegin");
    				int duration=bundle.getShort("nptTotal");
    				
    				intent.putExtra("nptBegin", beginStation);
    				intent.putExtra("nptTotal", duration);
    			    intent.putExtra("info", info);
    				sendBroadcast(intent);
       			
        			break;
        		case VideoConstant.PLAY_CONTROL:
        			
        			break;
        		case VideoConstant.HEART_BEAT:
        			break;
        			
        		case VideoConstant.QUERY_STATUS:
        			service.rcServerListener.getVodState(bundle);
        			break;
        			
    			default:
    				break;
        		}
    		}   		
    		

    	}		
	};

}
