package com.stv.supervod.service;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.ref.SoftReference;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.LinkedBlockingQueue;

import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.os.AsyncTask;
import android.view.View;
import android.widget.ImageView;

import com.stv.supervod.activity.R;
import com.stv.supervod.utils.Constant;
import com.stv.supervod.utils.ValidateUtil;

public class ImageDownloader {
	private ImageDownloader() {

	}

	public static ImageDownloader getImageDownloader() {
		if (imageDownloader == null) {
			imageDownloader = new ImageDownloader();
		}
		return imageDownloader;
	}

	public static void cleanPosterCache() {
		if (imageDownloader != null) {
			imageDownloader.writeQueue.clear();
			imageDownloader.writeQueue.clear();
			imageDownloader = null;
		}
	}

	/**
	 * 写文件的线程是否在执行的标记
	 */
	private volatile boolean writeFileFlag = false;

	/**
	 * 绑定view&task的散列
	 */
	private ConcurrentHashMap<View, SoftReference<DrawableDownloaderTask>> view2task = new ConcurrentHashMap<View, SoftReference<DrawableDownloaderTask>>(
			100);

	/**
	 * 写文件时的阻塞队列
	 */
	private BlockingQueue<SoftReference<Map<String, Object>>> writeQueue = new LinkedBlockingQueue<SoftReference<Map<String, Object>>>(500);

	/**
	 * Description: view 绑定到task
	 * 
	 * @Version1.0 2012-2-20 下午02:50:15 mustang created
	 * @param view
	 * @param task
	 */
	public void bindView2Task(View view, DrawableDownloaderTask task) {
		SoftReference<DrawableDownloaderTask> sft = new SoftReference<DrawableDownloaderTask>(task);
		view2task.put(view, sft);
	}

	/**
	 * Description: 通过view获取曾经绑定的task
	 * 
	 * @Version1.0 2012-2-20 下午02:50:32 mustang created
	 * @param view
	 * @return
	 */
	public SoftReference<DrawableDownloaderTask> getBindTaskByView(View view) {
		return view2task.get(view);
	}

	private static ImageDownloader imageDownloader;

	/**
	 * Description: 所有人调用的公共入口
	 * 
	 * @Version1.0 2011-12-29 下午04:22:15 mustang created
	 * @param url
	 * @param imageView
	 */
	public void download(String url, View view) {
		// 如果是空就不要在往下走了
		if (ValidateUtil.isBlank(url)) {
			if (view instanceof ImageView) {
				((ImageView) view).setImageResource(R.drawable.video_cover_default);
			} else {
				view.setBackgroundResource(R.drawable.homepage_init);
			}
			return;
		}
		String imgUrl = "http://192.168.14.61/" + url; 
		Drawable db = ImageServiceImpl.getImageDrawableByUrl(imgUrl);
		if (db != null && view != null) {
			if (view instanceof ImageView) {
				((ImageView) view).setImageDrawable(db);
			} else {
				view.setBackgroundDrawable(db);
			}
		} else {
			// 实在没找到才去服务器下载
			forceDownload(imgUrl, view);
		}
	}

	/**
	 * Description: 强制下载
	 * 
	 * @Version1.0 2011-12-29 下午04:20:21 mustang created
	 * @param url
	 * @param imageView
	 */
	private void forceDownload(String url, View view) {
		DrawableDownloaderTask task = new DrawableDownloaderTask(view);
		// 初始化图片
		if (view instanceof ImageView) {
			((ImageView) view).setImageResource(R.drawable.video_cover_default);
		} else {
			view.setBackgroundResource(R.drawable.homepage_init);
		}
		// 绑定view&task,带下载完毕后画页面时比对
		bindView2Task(view, task);
		task.execute(url);
	}

	/**
	 * Description: 异步下载任务
	 * 
	 * @Version1.0 2011-12-29 下午04:20:51 mustang created
	 * @param url
	 * @return
	 */
	public Drawable asyncDownloadDrawable(String url) {

		HttpDownloadImpl httpDownloader = new HttpDownloadImpl();
		Drawable drawable = null;
		if (!ValidateUtil.isBlank(url)) {
			try {
				drawable = httpDownloader.downloadImageByUrl(url);
				String[] names = url.split("/");
				String filename = "";
				if (names.length > 0) {
					filename = names[names.length - 1];
				}
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("filename", filename);
				map.put("drawable", drawable);
				writePoster2File(map);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		return drawable;

	}

	/**
	 * Description: 把写文件单独提出来
	 * 
	 * @Version1.0 2012-1-4 下午06:10:10 mustang created
	 * @param map
	 */
	public void writePoster2File(Map<String, Object> map) {
		writeQueue.add(new SoftReference<Map<String, Object>>(map));
		final String dpath = Constant.download_dir;
		if (writeFileFlag == false) {
			new Thread() {
				@Override
				public void run() {
					while (writeQueue.size() > 0) {
						writeFileFlag = true;
						Map<String, Object> map;
						try {
							SoftReference<Map<String, Object>> srf = (SoftReference<Map<String, Object>>) writeQueue.take();
							map = srf.get();
							if (map != null) {
								String filename = (String) map.get("filename");
								Drawable drawable = (Drawable) map.get("drawable");
								BitmapDrawable bd = null;
								if (drawable != null) {
									bd = (BitmapDrawable) drawable;
								}
								Bitmap bm = null;
								if (bd != null) {
									bm = bd.getBitmap();
								}
								if (bm != null) {
									FileOutputStream fos;
									try {
										fos = new FileOutputStream(new File(dpath, filename));
										bm.compress(Bitmap.CompressFormat.PNG, 100, fos);
										try {
											fos.close();
										} catch (IOException e) {
											e.printStackTrace();
										}
									} catch (FileNotFoundException e) {
										e.printStackTrace();
									}
								}
							}
						} catch (InterruptedException e1) {
							e1.printStackTrace();
						}
					}
					writeFileFlag = false;
				}
			}.start();
		}
	}

	/**
	 * Description: 异步的下载任务 Copyright (c) 永新视博 All Rights Reserved.
	 * 
	 * @version 1.0 2011-12-29 下午04:10:30 mustang created
	 */
	class DrawableDownloaderTask extends AsyncTask<String, Void, Drawable> {
		private String url;
		private View view;

		public DrawableDownloaderTask(View view) {
			this.view = view;
		}

		@Override
		protected Drawable doInBackground(String... params) {
			url = params[0];
			return asyncDownloadDrawable(url);
		}

		@Override
		protected void onPostExecute(Drawable result) {
			SoftReference<DrawableDownloaderTask> srf = getBindTaskByView(view);
			if (view != null && result != null && srf.get() != null && srf.get() == this) {
				view2task.remove(srf.get());
				if (view instanceof ImageView) {
					((ImageView) view).setImageDrawable(result);
				} else {
					view.setBackgroundDrawable(result);
				}
			}
		}

	}

}
