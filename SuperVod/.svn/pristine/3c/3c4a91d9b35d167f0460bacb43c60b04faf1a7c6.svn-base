package com.stv.supervod.activity;

import java.util.ArrayList;
import java.util.HashMap;

import com.stv.supervod.adapter.EditListItemAdapter;
import com.stv.supervod.service.HttpDownloadImpl.KeyEnum;
import com.stv.supervod.service.HttpDownloadImpl.TypeEnum;
import com.stv.supervod.utils.AlertUtils;
import com.stv.supervod.utils.TutorialDlgUtil;
import com.stv.supervod.utils.Constant.MyVodStateEnum;
import com.stv.supervod.widget_extended.ExListViewMyepg;
import com.stv.supervod.widget_extended.ExListViewMyepg.DeleteListener;

import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.View;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;

public class MyMovie extends BaseActivity{
	private final String TAG = "MyMovie";
	private final int MsgMyMovieDataOk = 1;	
	
	private ExListViewMyepg mListView;
	private ArrayList<HashMap<String, Object>> mListItem = new ArrayList<HashMap<String, Object>>();
	private Button mBtnBack;
	private Button mBtnEdit;
	private ProgressDialog mProgressDlg;
	
	private boolean mIsEdit = false;
	private EditListItemAdapter mItemListadapter = null;
	private int mItemSelected = -1;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.mymovie);
		
		initGui();

        getDataFromServer();
        
        bindAction();
	}
	
	private void initGui()
	{
		mListView = (ExListViewMyepg) findViewById(R.id.mymovie_list);
        mBtnBack = (Button) findViewById(R.id.mymovie_btn_back);
        mBtnEdit = (Button) findViewById(R.id.mymovie_btn_edit);
        mProgressDlg = (ProgressDialog) AlertUtils.createDialog(AlertUtils.NO_TITLE, this);
	}
	
	private void getDataFromServer()
	{
		mProgressDlg.show();
		
		new Thread() {
			public void run() {
				try {
					// TODO 1、准备显示数据的					
					sleep(1000);
					getTestProgramData();
					
//					String date = mListWeek.get(mListWeekSelect).get(WEEKLIST_KEY_NET).toString();
//					HttpDownloadImpl httpDownload = HttpDownloadImpl.getHttpDownloader();
//					mListItem = ((ArrayList<HashMap<String, Object>>) httpDownload.
//							downloadProgramList( mNumPerPage, mPageIndex, date, mAssetId ).get("list"));
//					
					mHandler.sendEmptyMessage( MsgMyMovieDataOk );
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}.start();		
	}
	
	private void bindAction()
	{
        // listview click
        mListView.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int position,
					long arg3) {
				// TODO Auto-generated method stub
				mItemSelected = position;
				if( mIsEdit ){
					//doDeleteFunc(position);
					showDialog();
				} else {
					submitDataToServer();			
				}
			}
		});
		
        // btn back
        mBtnBack.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Framework.switchActivityBack();
			}
		});
        
        // btn edit
        mBtnEdit.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				if( !mIsEdit && mListItem.isEmpty() ){
					return;
				}
								
				mIsEdit = !mIsEdit;
				if( mIsEdit ){
					mBtnEdit.setText(getString(R.string.further_btn_editok));
					mItemListadapter.enableEdit();
				} else {
					mBtnEdit.setText(getString(R.string.further_btn_edit));
					mItemListadapter.disableEdit();
				}
				showList();
			}
		});
	}
	
	
	private void showList()
	{
		if( mItemListadapter == null ){
			mItemListadapter = new EditListItemAdapter(this, mListItem);
			mListView.setAdapter(mItemListadapter);
		} else {
			//mItemListadapter.notifyDataSetChanged();
			
			if( mIsEdit ){
				mListView.setDropListener(mDropListener);
				mListView.setDeleteListener(mDeleteListener);
			} else {
				mListView.setDropListener(null);
				mListView.setDeleteListener(null);
			}
		}		
	}	
	
	private ExListViewMyepg.DeleteListener mDeleteListener = 
			new DeleteListener() {
				
				@Override
				public void delete(int which) {
					// TODO Auto-generated method stub
					mItemSelected = which;
					showDialog();
				}
			};
	
	private ExListViewMyepg.DropListener mDropListener =  
	        new ExListViewMyepg.DropListener() {  
	        public void drop(int from, int to) {  
	        	HashMap<String, Object> item = mListItem.get(from);  
	        	mListItem.remove(item);//.remove(from);  
	        	mListItem.add(to, item);  
	        	mItemListadapter.notifyDataSetChanged();
	        }  
	    }; 
	
	private void submitDataToServer()
	{
		Toast.makeText(this, "Submit", Toast.LENGTH_SHORT).show();
	}
	
	private void showDialog()
	{
		AlertDialog.Builder bd = new AlertDialog.Builder(MyMovie.this);
		bd.setTitle(R.string.further_dlg_title);
		
		bd.setMessage(R.string.further_dlg_delete_content);
		bd.setPositiveButton( getString(R.string.framework_dlg_btn_ok)
				, new OnClickListener() {
			
			@Override
			public void onClick(DialogInterface arg0, int arg1) {
				// TODO Auto-generated method stub
				doDeleteFunc();	
			}
		});
		
		bd.setNegativeButton(getString(R.string.framework_dlg_btn_cancel)
				, new OnClickListener() {
			
			@Override
			public void onClick(DialogInterface dialog, int which) {
				// TODO Auto-generated method stub
				
			}
		});
		
		bd.setCancelable(false);
		bd.show();
	}
	
	private void doDeleteFunc()
	{
		if( mItemSelected == -1 ){
			mListItem.clear();
		} else {
			mListItem.remove(mItemSelected);
		}
		mItemListadapter.notifyDataSetChanged();
	}    
	    
	private Handler mHandler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case MsgMyMovieDataOk:
				showList();
				mProgressDlg.dismiss();
				break;

			default:
				break;
			}
		}
	};
	
	private void getTestProgramData()
	{
		for (int i = 0; i < 22; i++) {
			HashMap<String, Object> map = new HashMap<String, Object>(); 

			map.put(KeyEnum.title.toString(), String.format("东方时空--%d", i));
			map.put(KeyEnum.actor.toString(), "cctv");
			map.put(KeyEnum.imgurl.toString(), "http://image1.webscache.com/baike/haibao/ipad/2008-08/202573033-321-2008-08-29%2015-19-47.jpg");
			map.put(KeyEnum.assetid.toString(), i);
			map.put(KeyEnum.offering_id.toString(), i);
			map.put(KeyEnum.category.toString(), "回看");
			map.put(KeyEnum.bandwidth.toString(), "SD");
			map.put(KeyEnum.run_time.toString(), "7200");
			
			if( i % 3 == 0 ){
				map.put(KeyEnum.type.toString(), TypeEnum.MOVIE);
			} else if(i % 3 == 1){
				map.put(KeyEnum.type.toString(), TypeEnum.TSTV);
			} else {
				map.put(KeyEnum.type.toString(), TypeEnum.TV);
			}
			
			if( i == 2 ){
				map.put(KeyEnum.state.toString(), MyVodStateEnum.play.toString());
				map.put(KeyEnum.title.toString(), String.format("东方时空asdas啥打算sas"));
			}
			
			mListItem.add(map);  
		}
	}
}
