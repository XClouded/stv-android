package com.stv.supervod.activity;

import java.util.ArrayList;
import java.util.HashMap;

import com.stv.supervod.adapter.ListItemSimpleAdapter;
import com.stv.supervod.widget_extended.ExGridViewTvList;

import android.app.Dialog;
import android.app.ListActivity;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.GridView;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import android.widget.TextView;

public class CategoryItem extends ListActivity implements OnScrollListener{
	
	private Bundle myBundle;
	private Handler handler;
	
	private ArrayList<HashMap<String, Object>> listItem = new ArrayList<HashMap<String, Object>>();
	private String[] types = { "剧情", "动作，剧情", "惊悚，剧情", "动作", "剧情", 
							"喜剧，剧情", "悬疑，惊悚，剧情", "动作", "剧情", "喜剧，爱情"};
	private String[] names = { "斗魂", "战狼传说", "玩尽杀绝IV", "小镇反面", "逃亡乐队", 
							"情寻色香味", "影子写手", "半身缘", "东京十一罗汉", "埃及艳后"};
	
	private ArrayList<HashMap<String, Object>> sortTextItem = new ArrayList<HashMap<String, Object>>();
	private ArrayList<HashMap<String, Object>> orderTextItem = new ArrayList<HashMap<String, Object>>();
	private ArrayList<HashMap<String, Object>> sequenceTextItem = new ArrayList<HashMap<String, Object>>();
	private String[] typeStrings = { "全部", "喜剧", "爱情", "剧情", "惊悚",
						"动画", "警匪", "恐怖", "科幻", "动作"};
	private String[] orderStrings = { "默认", "最新", "最热", "评分", "字母" };
	private String[] sequenceStrings = { "升序", "降序" };
	
	private Dialog dlg;
	private ListView listView; 
	private View loadMoreView;  
    private Button loadMoreButton;
	private ListItemSimpleAdapter adapter;
	
	
	private String titleString;
    private int visibleLastIndex = 0;   //最后的可视项索引   
    private int visibleItemCount;       // 当前窗口可见项总数
	
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
        setContentView(R.layout.category_item);
        
        handler = new Handler();
        
        TextView categoryTextView = (TextView)findViewById(R.id.category_name);
        Button catergoryButton = (Button)findViewById(R.id.btn_category);
        Button sortButton = (Button)findViewById(R.id.btn_sort);
        Button returnButton = (Button)findViewById(R.id.category_btn_back);

        listView = getListView();
        loadMoreView = getLayoutInflater().inflate(R.layout.list_load_more, null);  
        loadMoreButton = (Button) loadMoreView.findViewById(R.id.btn_load_more);
        listView.addFooterView(loadMoreView);   //设置列表底部视图 
        
        myBundle = this.getIntent().getExtras();
        titleString = myBundle.getString("category_name");
        categoryTextView.setText(titleString);
      
        //生成动态数组，并且转入数据  
        for(int i=0; i < typeStrings.length; i++)  
        {  
          HashMap<String, Object> map = new HashMap<String, Object>();  
          map.put("SortItem", typeStrings[i]);
          sortTextItem.add(map);  
        }
        
        for(int i=0; i < orderStrings.length; i++)  
        {  
          HashMap<String, Object> map = new HashMap<String, Object>();  
          map.put("SortItem", orderStrings[i]);
          orderTextItem.add(map);  
        }
        
        for(int i=0; i < sequenceStrings.length; i++)  
        {  
          HashMap<String, Object> map = new HashMap<String, Object>();  
          map.put("SortItem", sequenceStrings[i]);
          sequenceTextItem.add(map);  
        }
        
        adapter = new ListItemSimpleAdapter(this, 
											getData(myBundle.getString("category_name")),
											R.layout.category_item_list,
											new String[]{"ItemName","ItemType","ItemImage", "ItemRatingBar", "ItemRatingScore1", "ItemRatingScore2"},
											new int[]{ R.id.item_name, R.id.item_type, R.id.item_img, R.id.ratingBar, R.id.ratingScore1, R.id.ratingScore2 });
        setListAdapter(adapter);
        listView.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
					long arg3) {			
				// TODO Auto-generated method stub
				Intent intent = new Intent( CategoryItem.this, Detail.class);
				intent.putExtra("EpisodeNumber", 30);
				Framework.switchActivity("Detail", intent);			
			}
        	
		});
        
        catergoryButton.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				showAlertDialog(R.layout.category_sort, sortTextItem, sortTextItem);
			}
		});
        
        sortButton.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				showAlertDialog(R.layout.category_order, orderTextItem, sequenceTextItem);
			}
		});
        
        returnButton.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Framework.switchActivityBack();
			}
		});
        
        loadMoreButton.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				loadMoreButton.setText("正在加载...");   //设置按钮文字loading   
		        handler.postDelayed(new Runnable() {  
		            @Override  
		            public void run() {  
		                  
		            	loadMoreData();  
		                  
		                adapter.notifyDataSetChanged(); //数据集变化后,通知adapter   
		                listView.setSelection(visibleLastIndex - visibleItemCount + 1); //设置选中项   
		                  
		                loadMoreButton.setText("查看更多");    //恢复按钮文字   
		            }  
		        }, 2000);  
			}
		});
	}

	private ArrayList<HashMap<String, Object>> getData(String category_type) {
		
		for(int i=0;i<10;i++)  
        {  
          HashMap<String, Object> map = new HashMap<String, Object>();  
          map.put("ItemName", names[i]);
          map.put("ItemType", types[i]);
          map.put("ItemImage", R.drawable.video_cover_default);
          map.put("ItemRatingBar", 8.7f);
          map.put("ItemRatingScore1", "8.");
          map.put("ItemRatingScore2", "7");
          listItem.add(map);  
        }
		
		return listItem;
	}
	
	private ArrayList<HashMap<String, Object>> loadMoreData() {
		
		for(int i=0;i<10;i++)  
        {  
          HashMap<String, Object> map = new HashMap<String, Object>();  
          map.put("ItemName", names[i]);
          map.put("ItemType", types[i]);
          map.put("ItemImage", R.drawable.video_cover_default);
          map.put("ItemRatingBar", 8.7f);
          map.put("ItemRatingScore1", "8.");
          map.put("ItemRatingScore2", "7");
          listItem.add(map);  
        }
		
		return listItem;
	}
	
	private void showAlertDialog(int resId, ArrayList<HashMap<String, Object>> exgridview1, 
					ArrayList<HashMap<String, Object>> exgridview2) {
		dlg = new Dialog(CategoryItem.this, R.style.Dialog);
		/*Window win = dlg.getWindow();
		WindowManager.LayoutParams params = new WindowManager.LayoutParams();
		params.x = -160;//设置x坐标
		params.y = -202;//设置y坐标
		params.alpha = 1.0f;
		win.setAttributes(params);*/
		dlg.setContentView(resId);
		dlg.setCanceledOnTouchOutside(true);//设置点击Dialog外部任意区域关闭Dialog
		Window window = dlg.getWindow();
		window.setWindowAnimations(R.style.DialogWindowAnim);
		
		ExGridViewTvList exGridView1 = (ExGridViewTvList)dlg.findViewById(R.id.exgridview1);
		ExGridViewTvList exGridView2 = (ExGridViewTvList)dlg.findViewById(R.id.exgridview2);
		Button cancleButton = (Button)dlg.findViewById(R.id.btn_cancle);
		Button okButton = (Button)dlg.findViewById(R.id.btn_ok);
		TextView textView = (TextView)dlg.findViewById(R.id.sort_title);
		
		SimpleAdapter simpleAdapter1 = new SimpleAdapter(dlg.getContext(),
														exgridview1,
														R.layout.category_sort_grid,
														new String[] {"SortItem"},
														new int[] {R.id.sort_item});
		SimpleAdapter simpleAdapter2 = new SimpleAdapter(dlg.getContext(),
														exgridview2,
														R.layout.category_sort_grid,
														new String[] {"SortItem"},
														new int[] {R.id.sort_item});
		
		textView.setText(titleString);
		exGridView1.setDrawSelectorOnTop(true);
		exGridView1.setAdapter(simpleAdapter1);
		exGridView1.setOnItemClickListener(new ItemClickListener());
		
		exGridView2.setDrawSelectorOnTop(true);
		exGridView2.setAdapter(simpleAdapter2);
		exGridView2.setOnItemClickListener(new ItemClickListener());
		
		cancleButton.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				dlg.cancel();
			}
		});
		okButton.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				adapter.notifyDataSetChanged();
			}
		});
		//gridView.setOnItemClickListener(new ItemClickListener());
		dlg.show();
	}
	
	/* (non-Javadoc)
	 * @see android.widget.AbsListView.OnScrollListener#onScroll(android.widget.AbsListView, int, int, int)
	 */
	@Override
	public void onScroll(AbsListView view, int firstVisibleItem,
			int visibleItemCount, int totalItemCount) {
		// TODO Auto-generated method stub
		this.visibleItemCount = visibleItemCount;  
        visibleLastIndex = firstVisibleItem + visibleItemCount - 1;
	}

	/* (non-Javadoc)
	 * @see android.widget.AbsListView.OnScrollListener#onScrollStateChanged(android.widget.AbsListView, int)
	 */
	@Override
	public void onScrollStateChanged(AbsListView view, int scrollState) {
		// TODO Auto-generated method stub
		int itemsLastIndex = adapter.getCount() - 1;    //数据集最后一项的索引   
        int lastIndex = itemsLastIndex + 1;             //加上底部的loadMoreView项   
        if (scrollState == OnScrollListener.SCROLL_STATE_IDLE
    		&& visibleLastIndex == lastIndex) {  
            //如果是自动加载,可以在这里放置异步加载数据的代码   
            Log.d("LOADMORE", "loading...");  
        } 
	}
	
	class  ItemClickListener implements OnItemClickListener {  
		public void onItemClick(AdapterView<?> arg0,//The AdapterView where the click happened   
                              View arg1,//The view within the AdapterView that was clicked  
                              int arg2,//The position of the view in the adapter  
                              long arg3//The row id of the item that was clicked  
                              ) {  
		    //在本例中arg2=arg3  
			
			if (((GridView)arg0).getTag() != null) {
				((View)((GridView)arg0).getTag()).setBackgroundDrawable(null);
			}

			((GridView)arg0).setTag(arg1);
			
			arg1.setBackgroundResource(R.drawable.channelsecondtextchoose_bg);
		}
	}
}
