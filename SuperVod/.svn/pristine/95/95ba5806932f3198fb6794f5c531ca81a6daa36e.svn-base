package com.stv.supervod.activity;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONObject;

import android.R.integer;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RatingBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.stv.supervod.exception.ErrorCodeException;
import com.stv.supervod.service.HttpDownloadImpl;
import com.stv.supervod.service.ImageDownloader;
import com.stv.supervod.service.HttpDownloadImpl.KeyEnum;
import com.stv.supervod.service.HttpDownloadImpl.TypeEnum;
import com.stv.supervod.utils.AlertUtils;
import com.stv.supervod.utils.Constant;
import com.stv.supervod.utils.ErrorCode;
import com.stv.supervod.utils.ValidateUtil;
import com.stv.supervod.widget_extended.ExGridViewTvList;

/**
 * @author      Administrator
 * @description 影片详细页
 * @authority   登录或激活业务用户
 * @function    1、向用户展示固定影片详细信息
 *              2、用户点击评分按钮，判断用户是否已登录，未登录则进入登录页面：Login
 *              3、用户点击收藏按钮，判断用户是否已激活，未激活则进入激活页面：Register，
 *                已激活则提交数据到服务器，并提示用户收藏成功
 *              4、用户点击播放按钮，判断用户是否已激活，未激活则进入激活页面：Register，
 *                已激活则进入播放页面：Play
 */

/**
 * Description: 
 * Copyright (c) 永新视博
 * All Rights Reserved.
 * @version 1.0  2011-11-29 下午4:56:07 zhaojunfeng created
 */
public class Detail extends BaseActivity{
	/**
	 * 常量
	 */
	private final String TAG = "Detail";
	private final int DEFAULT_EPISODE_COUNT = 10;
	
	private final int MSG_GET_DATA_FINISH = 1; 
	private final int MSG_GET_DATA_ERROR = 2; 
	
	/**
	 * 全局变量
	 */
	private Map<String, Object> mProgram = null;
	private List<Map<String, Object>> mEpisodeLists = null;
	private Boolean mIsMovie;
	private String mProgramAssetId = "";
	private int mEpisodeCount = 22;
	private boolean isExpand = false;
	private boolean ableExpand = false;
	
	private boolean mIsSortOrder = true;
	private int mEpisodeSelected = 0;
//	private SharedPreferences sp;
	private EpisodeListAdapter episodeAdapter = null ;
	
	/**
	 * 控件
	 */
	private ExGridViewTvList mgv = null;
	private ProgressDialog mProgressDlg;
	private Button btnExpand = null;
	private Button btnSort = null;
	private Button btn_play = null;
	private Button btn_add_myfav = null;
	private Button btn_add_myvod = null;
	private Button btn_back = null;
	private ImageView mIvPoster = null;
	private TextView mTvTitle;
	private TextView mTvInfoRow1;
	private TextView mTvInfoRow2;
	private TextView mTvInfoDesc;
	private TextView mTvInfoPoint;
	private RatingBar mRateBar;
	private LinearLayout mLlContent;
	
	private RelativeLayout episodeView;
	private FrameLayout episodeExpose;
	
	@Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.detail);
                
        initGui();
        
        doLoadingData();
                
		bindAction();
    }
	
	private void initGui()
	{
		btn_back = (Button) findViewById(R.id.detail_btn_back);
		mIvPoster = (ImageView) findViewById(R.id.detail_iv_poster);
		mTvTitle = (TextView) findViewById(R.id.detail_title_textView);
		mTvInfoRow1 = (TextView) findViewById(R.id.detail_tv_row1);
		mTvInfoRow2 = (TextView) findViewById(R.id.detail_tv_row2);
		mTvInfoDesc = (TextView) findViewById(R.id.detail_tv_desc);
		mTvInfoPoint  = (TextView) findViewById(R.id.detail_tv_point);
		
		btn_play = (Button) findViewById(R.id.detail_btn_play);
		btn_add_myvod = (Button) findViewById(R.id.detail_btn_epg);
		btn_add_myfav = (Button) findViewById(R.id.detail_btn_fav);
		
		mRateBar = (RatingBar) findViewById(R.id.detail_ratingBar);
		
		episodeView = (RelativeLayout) findViewById(R.id.detail_rl_episode);
		episodeExpose = (FrameLayout) findViewById(R.id.detail_episode_fl_bottom);
	
		mLlContent = (LinearLayout) findViewById(R.id.detail_rl_content);
		mLlContent.setVisibility(View.INVISIBLE);
	}
	
	private void showInfo()
	{
		try {
			String row1 = "";
			String row2 = "";
			String desc = "";
			
			row1 = getString(R.string.detail_txt_director)+ 
					mProgram.get(KeyEnum.director.toString()).toString();
			row2 = getString(R.string.detail_txt_actor) + 
					mProgram.get(KeyEnum.actor.toString()).toString();
			desc = mProgram.get(KeyEnum.descrip.toString()).toString();			

			mTvTitle.setText(mProgram.get(KeyEnum.title.toString()).toString());
			mTvInfoRow1.setText(row1 );
			mTvInfoRow2.setText( row2 );
			
			int point = Integer.parseInt(mProgram.get(KeyEnum.recommendRank.toString()).toString());
			mTvInfoPoint.setText( String.valueOf(point*Constant.RECOMMEND_RANK_SCALE) );
			mRateBar.setRating(point*Constant.RECOMMEND_RANK_SCALE);
			mTvInfoDesc.setText(desc);
			
	        String poster = mProgram.get(KeyEnum.poster.toString()).toString();
			if (!ValidateUtil.isBlank(poster)) {
		        ImageDownloader downloader =ImageDownloader.getImageDownloader();
		        downloader.download(poster, mIvPoster);
			}
			
			initEpisodeGui();
			mLlContent.setVisibility(View.VISIBLE);
		} catch (Exception e) {
			// TODO: handle exception
			AlertUtils.displayToast(this, e.getMessage());
		}
	}
	
	private void doLoadingData()
	{
		Bundle extras = getIntent().getExtras();
				
		mIsMovie = extras.getBoolean(KeyEnum.type.toString());
		// 暂时使用该值保存详细信息的assetID,待收取数据完毕后更新
		mProgramAssetId = extras.getString(KeyEnum.assetId.toString());
		
		mProgressDlg = (ProgressDialog) AlertUtils.createDialog(
				AlertUtils.NO_TITLE, this);
		mProgressDlg.show();
		
		new Thread(){
			public void run(){
				try {
					// just for test
//					getFakeDataFromServer();
//					Thread.sleep(500);	
					HttpDownloadImpl httpDownload = new HttpDownloadImpl();
					if( mIsMovie ){	
						mProgram = httpDownload.downloadMovieDetail(mProgramAssetId);
					} else {	
						mProgram = httpDownload.downloadTvDetail(mProgramAssetId);
					}
					mHandler.sendEmptyMessage( MSG_GET_DATA_FINISH );
				}  catch (Exception e){
					e.printStackTrace();
					Message msg = new Message();
					msg.what = MSG_GET_DATA_ERROR;
					msg.obj=ErrorCode.getErrorInfo(e);
					mHandler.sendMessage(msg);
				}
			}
		}.start();
	}
	
	private void getFakeDataFromServer()
	{
		// ... get data
		mProgram = new HashMap<String, Object>();
		mProgram.put(KeyEnum.title.toString(), "龙门飞甲");
		mProgram.put(KeyEnum.poster.toString(), "http://www.baidu.com/img/baidu_jgylogo3.gif");
		mProgram.put(KeyEnum.categories.toString(), "惊悚、3D");
		mProgram.put(KeyEnum.recommendRank.toString(), "85");
		mProgram.put(KeyEnum.director.toString(), "徐克");
		mProgram.put(KeyEnum.actor.toString(), "李连杰");
		mProgram.put(KeyEnum.runTime.toString(), "2000");
		mProgram.put(KeyEnum.bandwidth.toString(), "SD");
		mProgram.put(KeyEnum.descrip.toString(), "费拉了拉了上拉力赛拉链上两大lsd拉萨的");
				
		if( mIsMovie ){
			mEpisodeCount = 0;
			mProgram.put(KeyEnum.assetId.toString(), "2000");
			return;
		}
		
		mEpisodeCount = 15;
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		for (int i = 0; i < mEpisodeCount; i++) {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(KeyEnum.assetId.toString(), (i+1)*10);
			map.put(KeyEnum.episode.toString(), i+1);
			list.add(map);
		}
		mProgram.put("list", list);
	}
	
	private Handler mHandler = new Handler(){
		
		@Override
		public void handleMessage(Message msg){
			mProgressDlg.dismiss();
			switch (msg.what) {
			case MSG_GET_DATA_FINISH:
				try {
					if( mProgram == null ){
						throw new Exception(getString(R.string.detail_txt_data_invaildate));
					}
										
					if( mIsMovie ){
						mEpisodeCount = 0;
						mProgramAssetId = mProgram.get(KeyEnum.assetId.toString()).toString();
					} else {
						mEpisodeLists = (List<Map<String, Object>>) mProgram.get("list");
						if( mEpisodeLists == null || mEpisodeLists.size() == 0 ){
							throw new Exception(getString(R.string.detail_txt_data_invaildate));
						}
						mEpisodeCount = mEpisodeLists.size();
						mProgramAssetId = mEpisodeLists.get(0).get(KeyEnum.assetId.toString()).toString();
					}
										
					showInfo();
				} catch (Exception e) {
					// TODO: handle exception
					AlertUtils.displayToast(Detail.this, e.getMessage());
				}
				break;
			case MSG_GET_DATA_ERROR:
				AlertUtils.displayToast(Detail.this, (String) msg.obj);
				break;
			default:
				break;
			}
		}
	};
	
	private void bindAction(){
		btn_back.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				Framework.switchActivityBack();
			}
		});
		
		btn_play.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				playProgram();
			}
		});
		
		btn_add_myvod.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				addMyVod();
			}
		});
		
		btn_add_myfav.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				addMyFav();
			}
		});
	}
	
	private void playProgram()
	{
		String info = "Play type=" + mIsMovie;
		try {
			if( mEpisodeCount == 0 ){
				info += " assetid=" + mProgramAssetId;
			} else {
				mProgramAssetId = mEpisodeLists.get(mEpisodeSelected).
						get(KeyEnum.assetId.toString()).toString();
				String episode = mEpisodeLists.get(mEpisodeSelected).
						get(KeyEnum.episode.toString()).toString();
				info += " assetid=" + mProgramAssetId + " episode=" + episode;
			}
		} catch (Exception e) {
			// TODO: handle exception
			info += " Error:" + e.getMessage();
		}
		AlertUtils.displayToast(Detail.this, info);
	}
	
	private void addMyFav()
	{
		String title = mProgram.get(KeyEnum.title.toString()).toString() + "#" + mEpisodeSelected ;
		String type = (mIsMovie)?TypeEnum.MOVIE.toString():TypeEnum.TV.toString();
		String category = mProgram.get(KeyEnum.categories.toString()).toString();
		String poster = mProgram.get(KeyEnum.poster.toString()).toString();
		boolean ret = addMyfav(title, type, category, poster, mProgramAssetId); 
		if( ret ){
			AlertUtils.displayToast(Detail.this, "addMyFav Success" );				
		} else {
			AlertUtils.displayToast(Detail.this, "addMyFav Failed" );				
		}
	}
	
	private void addMyVod()
	{
	}	
	
	private void initEpisodeGui()
	{
		if( mEpisodeCount == 0 ){
			episodeView.setVisibility(View.GONE);
			ableExpand = false;			
			return ;
		} else if( mEpisodeCount <= DEFAULT_EPISODE_COUNT ){
			ableExpand = false;	
		} else {
			ableExpand = true;	
		}
		
		TextView episodeTitle = (TextView)findViewById(R.id.detail_tv_episode_number);
		episodeTitle.setText( String.format( 
				getString(R.string.detail_txt_episode_number), mEpisodeCount) );
		
		// do GridView
		mgv = (ExGridViewTvList) findViewById( R.id.detail_egv_episode_list );
		mgv.setDrawSelectorOnTop(false);
		mgv.setColumnWidth(78);
		mgv.setSelector(new ColorDrawable(Color.TRANSPARENT));
		episodeAdapter = new EpisodeListAdapter( this );
		mgv.setAdapter(episodeAdapter);
		mgv.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int position,
					long arg3) {
				// TODO Auto-generated method stub
				mEpisodeSelected = position;
				mProgramAssetId = mEpisodeLists.get(mEpisodeSelected).
						get(KeyEnum.assetId.toString()).toString();
        		episodeAdapter.notifyDataSetChanged();
			}
		});
		
		// do expand 
		btnExpand = (Button) findViewById(R.id.detail_btn_expand);
		if( ableExpand ){
			btnExpand.setVisibility(View.VISIBLE);
			episodeExpose.setBackgroundResource(R.drawable.poster_detail_bottom);
			
			btnExpand.setOnClickListener(new OnClickListener() {
				
				@Override
				public void onClick(View v) {
					// TODO Auto-generated method stub
					isExpand = !isExpand;
					episodeAdapter.doExpand();
					Drawable img = null;
					
					if( isExpand ){
						img = getResources().getDrawable(R.drawable.poster_fenji_up);
						btnExpand.setText(R.string.detail_btn_unexpand);
					} else {
						btnExpand.setText(R.string.detail_btn_expand);
						img = getResources().getDrawable(R.drawable.poster_fenji_down);
					}
					img.setBounds(0, 0, img.getMinimumWidth(), img.getMinimumHeight());
					btnExpand.setCompoundDrawables(img, null, null, null);
				}
			});
		} else {
			btnExpand.setVisibility(View.GONE);
			episodeExpose.setBackgroundResource(R.drawable.poster_detail_bottom_no_content);
		}
		
		// do sort
		btnSort = (Button) findViewById(R.id.detail_btn_episode_sort);
		btnSort.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				mIsSortOrder = !mIsSortOrder;
				Drawable img = null;
				episodeAdapter.notifyDataSetChanged();
				if( mIsSortOrder ){
					btnSort.setText(R.string.detail_btn_rsort);
					img = getResources().getDrawable(R.drawable.poster_detail_fan);
				} else {
					btnSort.setText(R.string.detail_btn_sort);
					img = getResources().getDrawable(R.drawable.poster_detail_zheng);
				}
				img.setBounds(0, 0, img.getMinimumWidth(), img.getMinimumHeight());
				btnSort.setCompoundDrawables(img, null, null, null);
			}
		});
	}
		
	private class EpisodeListAdapter extends BaseAdapter{
		private Context _Con;
		private int _Count;
		
		private class ViewHolder{
			LinearLayout mSubItemBg;
			TextView mSubItemTv;
		}
		
		public EpisodeListAdapter( Context c ){
			_Con = c;
			
			// 展开
			if( isExpand ){ 
				_Count = mEpisodeCount;
			} else {
				_Count = (mEpisodeCount>DEFAULT_EPISODE_COUNT)?
						DEFAULT_EPISODE_COUNT:mEpisodeCount;
			}
		}
		
		public void doExpand(){
			if( isExpand ){ 
				_Count = mEpisodeCount;
			} else {
				_Count = (mEpisodeCount>DEFAULT_EPISODE_COUNT)?
						DEFAULT_EPISODE_COUNT:mEpisodeCount;
			}
			notifyDataSetChanged();
		}
		
		@Override
		public int getCount() {
			// TODO Auto-generated method stub
			return _Count;
		}

		@Override
		public Object getItem(int arg0) {
			// TODO Auto-generated method stub
			return arg0;
		}

		@Override
		public long getItemId(int arg0) {
			// TODO Auto-generated method stub
			return arg0;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup arg2) {
			// TODO Auto-generated method stub
			ViewHolder v;
			int select = (mIsSortOrder)?position:(mEpisodeCount - position - 1);
			
			if( convertView == null ){
				LayoutInflater mInflater = (LayoutInflater) _Con.getSystemService(
						Context.LAYOUT_INFLATER_SERVICE);
				convertView = mInflater.inflate(R.layout.detail_episode_item, arg2, false);
				
				v = new ViewHolder();
				v.mSubItemBg = (LinearLayout) convertView.findViewById(R.id.detail_subitem_ll);
				v.mSubItemTv = (TextView) convertView.findViewById(R.id.detail_subitem_tv_number);
				convertView.setTag(v);
			} else {
				v = (ViewHolder) convertView.getTag();
			}			
			try {				
				String number = mEpisodeLists.get(select).get(KeyEnum.episode.toString()).toString();
				v.mSubItemTv.setText(String.format("%02d", Integer.parseInt(number)));
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
				return convertView;
			}			
			if( mEpisodeSelected == select ){
				v.mSubItemBg.setBackgroundResource(R.drawable.poster_detail_press);
				v.mSubItemTv.setTextColor(Color.BLACK);
			} else {
				v.mSubItemBg.setBackgroundDrawable(null);
				v.mSubItemTv.setTextColor(Color.WHITE);
			}
			return convertView;			
		}
		
	}
}
