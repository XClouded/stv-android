package com.stv.supervod.service;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.http.client.ClientProtocolException;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Environment;

import com.stv.supervod.activity.R;
import com.stv.supervod.utils.Constant;
import com.stv.supervod.utils.ValidateUtil;

public class HttpDownloadImpl {

	private static List<String> imagedownloadlist = new ArrayList<String>();
	/**
	 * Description: 首页列表数据下载
	 * @Version1.0 2011-12-13 下午02:03:59 mustang created
	 * @param act
	 * @return
	 * @throws ClientProtocolException
	 * @throws IOException
	 * @throws JSONException
	 */
	public static Map<String, List<Map<String, Object>>> dowaloadHomePageData(Activity act) throws ClientProtocolException, IOException, JSONException {
		StringBuilder sb = HttpRequestServiceImpl.requestByHttpClient("", Constant.HOMEPAGE_DATA_URL);
		Map<String, List<Map<String, Object>>> map = new HashMap<String, List<Map<String, Object>>>();
		List<Map<String, Object>> todaylist = parseJson(sb, "today_hit", "list", act);
		List<Map<String, Object>> neidiList = parseJson(sb, "neidiList", "list", act);
		map.put("today_hit", todaylist);
		map.put("neidiList", neidiList);
		return map;
	}

	/**
	 * Description: 解析服务器下发的JSON对象、数组
	 * @Version1.0 2011-12-13 下午01:11:12 mustang created
	 * @param sb
	 * @param objname
	 * @param arrayname
	 * @param act
	 * @return
	 * @throws JSONException
	 */
	public static List<Map<String, Object>> parseJson(StringBuilder sb, String objname, String arrayname, Activity act) throws JSONException {
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		JSONObject jsonObject = new JSONObject(sb.toString()).getJSONObject(objname);
		JSONArray jsonArray = null;
		if (jsonObject != null) {
			jsonArray = jsonObject.getJSONArray(arrayname);
		}
		if (jsonArray != null && jsonArray.length() > 0) {
			for (int i = 0; i < jsonArray.length(); i++) {
				Map<String, Object> map = new HashMap<String, Object>();
				JSONObject obj = (JSONObject) jsonArray.opt(i);
				// 影片名字
				map.put("name", obj.getString("name"));
				// 影片类型
				map.put("type", obj.getString("type"));
				// 解析海报
				String url = obj.getString("imgurl");
				if (!ValidateUtil.isBlank(url)) {
					String[] urls = url.split("/");
					if (urls != null && urls.length > 0) {
						String imgname = urls[urls.length - 1];
						Drawable da = ImageServiceImpl.getImageDrawable(imgname, act);
						if (da != null) {
							map.put("img", da);
						} else {
							Drawable defalut = act.getResources().getDrawable(R.drawable.video_cover_default);
							//设置为默认图片，同时记录要下载的图片名称，带下载完毕后及时刷新列表
							map.put("img", defalut);
							map.put("imagename", imgname);
							// TODO, URL是否为全路径，数据否需要客户端拼写。说明本地图片已经过期，需要重新下载
							imagedownloadlist.add(url);
						}
					}
				}
				// 解析评分
				String ratingBar = obj.getString("ratingBar");
				if (!ValidateUtil.isBlank(ratingBar)) {
					float vr = Float.parseFloat(ratingBar);
					if (vr > -1) {
						map.put("ratingBar", vr);
					}
					String[] rs = ratingBar.split(".");
					if (rs != null && rs.length > 1) {
						map.put("ratingScore1", rs[0] + ".");
						map.put("ratingScore2", rs[1]);
					}
				}
				list.add(map);
			}
		}
		return list;
	}



	

	/**
	 * Description: 保存文件 文件夹路径格式：有sdcard情况
	 * /mnt/sdcard/com.com.stv.supervod.activity/files
	 * 无sdcard情况是：/date/date/com.com.stv.supervod.activity/files
	 * 
	 * @Version1.0 2011-12-12 上午11:01:53 mustang created
	 * @param bp
	 * @param filename
	 * @param activity
	 * @throws IOException
	 */
	public static void downloadImageList( Activity activity) throws IOException {
		File dir = null;
		// 外置存储卡需要配置权限
		if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
			dir = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/" + activity.getPackageName() + "/files");
			if (!dir.exists()) {
				dir.mkdirs();
			}
		} else {
			dir = activity.getFilesDir();
		}
		String dpath = dir.getAbsolutePath();
		if (imagedownloadlist != null && !imagedownloadlist.isEmpty()) {
			for (String url : imagedownloadlist) {
				if (!ValidateUtil.isBlank(url)) {
					URL imageurl = new URL(url);
					HttpURLConnection conn = (HttpURLConnection) imageurl.openConnection();
					conn.setDoInput(true);
					conn.connect();
					InputStream is = conn.getInputStream();
					Bitmap bp = BitmapFactory.decodeStream(is);
					is.close();
					String[] names = url.split("/");
					String filename = "";
					if (names.length > 0) {
						filename = names[names.length - 1];
					}
					if (bp != null && !ValidateUtil.isBlank(filename)) {
						Uri uri = Uri.fromFile(new File(dpath, filename));
						OutputStream os = activity.getContentResolver().openOutputStream(uri);
						bp.compress(Bitmap.CompressFormat.PNG, 100, os);
						os.close();
					}
				}
			}
			imagedownloadlist.clear();
		}

	}


	


}
