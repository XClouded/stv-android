package com.stv.supervod.service;

import android.os.Bundle;
import android.os.Handler;
import android.os.Message;

import com.stv.supervod.exception.ErrorCodeException;
import com.stv.supervod.service.HttpDownloadImpl.TypeEnum;
import com.stv.supervod.utils.VideoConstant;
import com.stv.supervod.utils.VodModel;

/**
 * 
 * Copyright (c) 永新视博 All Rights Reserved.
 * @author Administrator
 * create 2012-3-1 下午2:50:50
 *
 */
public class VideoServiceImpl {
	public static  TCPClient client=null;
	private Bundle bundle;
	
	private String offeringId;//视频id
	private boolean status=true;//播放状态
	
	
	public void setStatus(boolean status) {
		this.status = status;
	}
	
	public void setOfferingId(String offeringId) {
		this.offeringId = offeringId;
	}


	private static final VideoServiceImpl videoService=new VideoServiceImpl();
	
	public static VideoServiceImpl getInstance(){
		return videoService;
	}
	private VideoServiceImpl(){
		
		client=new TCPClient(handler);
	}
	
	
	/**
	 * Handle message from RCServer
	 */
    private Handler handler = new Handler() {
		@Override
		public void handleMessage(Message msg){   		
    	
    		String info="";
    		int errorCode=msg.arg1;
    		if(errorCode==1001){//网络连接失败
    			info="网络连接失败";
    		}else{
    			bundle=msg.getData();
    			byte type=bundle.getByte("type");
        		byte operationCode=bundle.getByte("operationCode");
        	    if(operationCode==VideoConstant.FAIL_NOT_EXIST_USER){
    				info = "服务器验证无此用户";   				  				
    			}
    			else if(operationCode==VideoConstant.FAIL_SYSTEM_ERROR){
    				info="VOD系统错误";  				
    			}
    			else if(operationCode==VideoConstant.FAIL_MULTI_ACTIVE_USER){
    				info="其他用户已经登陆";    				
    			}
    			else if(operationCode==VideoConstant.FAIL_SYSTEM_MAINTAINING){
    				info = "VOD系统维护中";   				    			
    			}
    			else if(operationCode==VideoConstant.FAIL_PASSWORD_ERROR){
    				info = "密码错误";   				
    			}
    			else if(operationCode==VideoConstant.FAIL_NOT_EXIST_RESOURCE){
    				info="资源不存在";        			    				
    			}
    			else if(operationCode==VideoConstant.FAIL_RESOURCE_NOT_ENOUGH){
    				info="资源不足";    				
    			}    			
    			else if(operationCode==VideoConstant.FAIL_CA_SWITHCHFREP){
    				info="CA系统切换频点失败";    				    				
    			}    			
    			else if(operationCode==VideoConstant.FAIL_SESSION_NOT_EXIST){
    				info="会话已经不存在,请重新连接"; 
    			}
    			else if(operationCode==VideoConstant.FAIL_ILLEGAL_DATA){
    				info="非法数据";
    			}
    			else if(operationCode==VideoConstant.SUCCESS_PLAY){
    				info="成功播放";
    			}
    			else if(operationCode==VideoConstant.SUCCESS_PAUSE){
    				info="成功暂停";
    			}
    			else if(operationCode==VideoConstant.SUCCESS_FINISHED_PLAY){
    				info="点播节目已播放完成";
    			}
    			else{
    				info="全部播放完成";
    			}
        	    
        		switch(type){
        		case VideoConstant.APPLY_SERVICE: //申请服务
        			if(operationCode==VideoConstant.SUCCESS_PLAY){
        				info = "vod播放成功";
        				int beginStation=bundle.getShort("NPT_BEGIN");
        				int duration=bundle.getShort("NPT_TOTAL");
        				
//        				sendBroadcastInfo(beginStation,duration);   				
        			}
        			
        			
    								
    				break;
    				
        		case VideoConstant.MTV_BATCH_PLAY://mtv play
        			rcServerListener.getVodMtvPlayResult(bundle);
        			
        		case VideoConstant.VIDEO_BATCH_PLAY:
        			rcServerListener.getVodMoviePlayResult(bundle);
        			
        		case VideoConstant.SINGLE_PLAY:
        			if(operationCode==VideoConstant.SUCCESS_PLAY){
        				rcServerListener.getCommPlayResult(bundle);
        			}
        			
        			
        			break;
        		case VideoConstant.PLAY_CONTROL:
        			
        			break;
        		case VideoConstant.HEART_BEAT:
        			break;
        			
        		case VideoConstant.QUERY_STATUS:
        			rcServerListener.getVodState(bundle);
        			break;
        			
    			default:
    				break;
        		}
    		}   		
    		

    	}

		
	};
	
	public boolean getPlayStatus(String offeringId){
		if(this.offeringId==offeringId&&status==true){
			return true;
		}
			return false;
	}
	
	/**
	 * 申请服务 验证是否合法用户能否进行点播操作
	 * @param username
	 * @param password
	 * @param pwtype
	 * @throws ErrorCodeException
	 */
	public void appService(String username,String password,String pwtype) throws ErrorCodeException{
		VodModel model=new VodModel();
		model.setSmartCardId(username);
		model.setPassword(password);
		model.setIsPassword(Byte.parseByte(pwtype));
		client.applyServcie(model);
	}
	
	/**
	 * 播放控制 ：快进、快退、播放、暂停
	 * @param operation
	 * @throws ErrorCodeException
	 */
	public void PlayControl(byte operation) throws ErrorCodeException{
		VodModel model=new VodModel();
		model.setOperation(operation);
		client.playControl(model);
	}
	/**
	 * 退出播放状态
	 * @throws ErrorCodeException
	 */
	public void stopPlay() throws ErrorCodeException{
		client.Quit();
	}
	
	/**
	 * Description: 通知RCserver更新我的频道数据
	 * @Version1.0 2012-2-28 上午11:38:50 zhaojunfeng created
	 * @param type ： TypeEnum中的MTV or MOVIE
	 * @param channelId ： 频道ID
	 * @return : 返回批量点播的结果的键值对
	 * @throws ErrorCodeException
	 */
	public void myvodChannelUpdate( String type, String channelId ) throws ErrorCodeException	{
		VodModel model=new VodModel();
		model.setChannelId(channelId);
		model.setAction((byte)1);
		if(TypeEnum.KTV.toString()==type){
			client.mtvBatchPlay(model);
		}else{
			client.videoBatchPlay(model);
		}		
	}
	
	/**
	 * Description: 向RCServer查询节目播放状态
	 * @Version1.0 2012-2-28 下午1:43:55 zhaojunfeng created
	 * @return
	 * @throws ErrorCodeException
	 */
	public void myvodState() throws ErrorCodeException {
		VodModel model=new VodModel();
		client.queryStatus(model);		
	}
	
	/**
	 * Description: myvod的MTV批量点播
	 * @Version1.0 2012-2-28 下午1:54:39 zhaojunfeng created
	 * @param playMode
	 * @param playCount
	 * @param channelId
	 * @param offingId
	 * @return
	 * @throws ErrorCodeException
	 */
	public void myvodMtvPlay( byte playMode, int playCount, 
			String channelId, String offeringId) throws ErrorCodeException {
		VodModel model=new VodModel();
		model.setAction((byte)0);//播放
		model.setChannelId(channelId);
		model.setOfferingId(offeringId);
		model.setPlayMode(playMode);
		model.setPlayCount(playCount);
		client.mtvBatchPlay(model);

	}
	
	/**
	 * Description: myvod的视频批量点播
	 * @Version1.0 2012-2-28 下午1:55:08 zhaojunfeng created
	 * @param channelId
	 * @param offingId
	 * @param isBookmark
	 * @return
	 * @throws ErrorCodeException
	 */
	public void myvodMoviePlay(String channelId, String offeringId, byte isBookmark)
			throws ErrorCodeException{
		VodModel model=new VodModel();
		model.setAction((byte)0);//播放
		model.setChannelId(channelId);
		model.setOfferingId(offeringId);
		model.setIsBookmark(isBookmark);
		client.videoBatchPlay(model);
	}
	
	/**
	 * Description: 普通视频点播，需要启动播放前界面
	 * @Version1.0 2012-2-28 下午1:55:18 zhaojunfeng created
	 * @param offingId
	 * @param isBookmark
	 * @throws ErrorCodeException
	 */
	public void commPlay(String offeringId, byte isBookmark) throws ErrorCodeException{
		VodModel model=new VodModel();
		model.setAction((byte)0);//播放		
		model.setOfferingId(offeringId);
		model.setIsBookmark(isBookmark);
		client.play(model);
	}
   
	
	private RCServerListener rcServerListener;
	
	
	 public void setRcServerListener(RCServerListener rcServerListener) {
		this.rcServerListener = rcServerListener;
	}



	public interface RCServerListener{
		 void getChannelUpdateResult(Bundle bundle);
		 void getVodState(Bundle bundle);
		 void getVodMtvPlayResult(Bundle bundle);
		 void getVodMoviePlayResult(Bundle bundle);
		 void getCommPlayResult(Bundle bundle);
	 }
}
